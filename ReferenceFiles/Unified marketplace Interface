import React, { useState, useEffect } from 'react';
import { Search, Filter, Map, Zap, Home, Users, ShoppingBag, Award, Tag, ChevronDown, Heart, Share, Star, DollarSign, Layers, Clock, Calendar, Settings } from 'lucide-react';

// Sample marketplace data - would come from API in production
const sampleItems = [
  {
    id: 'zone001',
    type: 'Zone',
    name: 'Philosopher\'s Garden',
    description: 'A tranquil zone perfect for philosophy discussions and knowledge sharing.',
    price: 2500,
    currency: 'coins',
    seller: {
      id: 'seller123',
      name: 'AcademyOfAthens',
      rating: 4.8,
      verified: true
    },
    images: ['https://example.com/zone1.jpg'],
    location: 'Wisdom Sector, Northwestern Quarter',
    details: {
      size: '0.5 acres',
      capacity: 25,
      amenities: ['Reflection Pools', 'Discussion Circle', 'Scroll Library'],
      rating: 4.7,
      reviews: 23
    },
    availability: 'Immediate',
    featured: true,
    economicLayer: 'Port'
  },
  {
    id: 'power001',
    type: 'Power',
    name: 'Strategic Planning',
    description: 'Limited-time power boost that enhances your ability to create long-term plans.',
    price: 750,
    currency: 'coins',
    seller: {
      id: 'system',
      name: 'EudaimoniaGo',
      verified: true
    },
    images: ['https://example.com/power1.jpg'],
    details: {
      rarity: 'Rare',
      type: 'SoulOut',
      duration: '7 days',
      boostAmount: '+15% to planning tasks'
    },
    availability: 'Limited Time',
    featured: true,
    economicLayer: 'Port'
  },
  {
    id: 'resource001',
    type: 'Resource',
    name: 'Wisdom Crystals Bundle',
    description: 'Collection of rare crystals that can be used to enhance Soul Out experiences.',
    price: 350,
    currency: 'coins',
    seller: {
      id: 'seller456',
      name: 'ResourceEmporium',
      rating: 4.5,
      verified: true
    },
    images: ['https://example.com/resource1.jpg'],
    details: {
      quantity: 50,
      quality: 'High',
      usableWith: ['All Soul Out Powers', 'Wisdom Experiences']
    },
    availability: 'In Stock',
    economicLayer: 'Port'
  },
  {
    id: 'experience001',
    type: 'Experience',
    name: 'Symposium Masterclass',
    description: 'Learn the art of hosting philosophical gatherings from the masters.',
    price: 1200,
    currency: 'coins',
    seller: {
      id: 'seller789',
      name: 'SocraticAcademy',
      rating: 4.9,
      verified: true
    },
    images: ['https://example.com/experience1.jpg'],
    details: {
      duration: '3 hours',
      difficulty: 'Intermediate',
      participants: '5-10',
      prerequisites: ['Dialectic Reasoning (Basic)']
    },
    schedule: 'Saturdays, 2:00 PM',
    availability: 'Booking Open',
    economicLayer: 'Laws'
  },
  {
    id: 'subscription001',
    type: 'Subscription',
    name: 'Eudaimonia Plus',
    description: 'Premium membership with exclusive access to rare powers, zones, and experiences.',
    price: 9.99,
    currency: 'USD',
    recurrence: 'monthly',
    seller: {
      id: 'system',
      name: 'EudaimoniaGo',
      verified: true
    },
    images: ['https://example.com/subscription1.jpg'],
    details: {
      benefits: [
        'Unlock 5 rare powers monthly',
        'Priority access to premium zones',
        'Exclusive weekly experiences',
        '2x virtue gain rate',
        'No ads'
      ],
      popularity: 'Top Seller'
    },
    availability: 'Always Available',
    featured: true,
    economicLayer: 'Port'
  },
  {
    id: 'zone002',
    type: 'Zone',
    name: 'Craftsman\'s Workshop',
    description: 'Fully equipped workshop zone ideal for creation-focused events and experiences.',
    price: 200,
    currency: 'coins',
    recurrence: 'daily',
    seller: {
      id: 'seller321',
      name: 'MakersGuild',
      rating: 4.6,
      verified: true
    },
    images: ['https://example.com/zone2.jpg'],
    location: 'Production Sector, Eastern Quarter',
    details: {
      size: '0.3 acres',
      capacity: 15,
      amenities: ['Tool Station', 'Material Storage', 'Exhibition Space'],
      rating: 4.4,
      reviews: 17
    },
    availability: 'Available for Rent',
    economicLayer: 'Laws'
  }
];

const UnifiedMarketplaceInterface = () => {
  const [items, setItems] = useState(sampleItems);
  const [activeCategory, setActiveCategory] = useState('All');
  const [activeLayer, setActiveLayer] = useState('Port');
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedItem, setSelectedItem] = useState(null);
  const [cart, setCart] = useState([]);
  const [wishlist, setWishlist] = useState([]);
  const [userCoins, setUserCoins] = useState(5000);
  
  // Filter items based on search and active category
  useEffect(() => {
    let filtered = [...sampleItems];
    
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      filtered = filtered.filter(item => 
        item.name.toLowerCase().includes(query) || 
        item.description.toLowerCase().includes(query)
      );
    }
    
    if (activeCategory !== 'All') {
      filtered = filtered.filter(item => item.type === activeCategory);
    }
    
    if (activeLayer !== 'All') {
      filtered = filtered.filter(item => item.economicLayer === activeLayer);
    }
    
    setItems(filtered);
  }, [searchQuery, activeCategory, activeLayer]);
  
  // Add item to cart
  const addToCart = (item) => {
    setCart([...cart, item]);
  };
  
  // Toggle item in wishlist
  const toggleWishlist = (item) => {
    if (wishlist.some(i => i.id === item.id)) {
      setWishlist(wishlist.filter(i => i.id !== item.id));
    } else {
      setWishlist([...wishlist, item]);
    }
  };
  
  // Check if item is in wishlist
  const isInWishlist = (itemId) => {
    return wishlist.some(item => item.id === itemId);
  };
  
  // Purchase item
  const purchaseItem = (item) => {
    if (item.currency === 'coins' && userCoins >= item.price) {
      setUserCoins(userCoins - item.price);
      alert(`Successfully purchased ${item.name}!`);
    } else if (item.currency === 'USD') {
      alert('Redirecting to payment gateway...');
    } else {
      alert('Not enough coins!');
    }
  };
  
  // Calculate cart total
  const cartTotal = cart.reduce((total, item) => {
    if (item.currency === 'coins') {
      return total + item.price;
    }
    return total;
  }, 0);
  
  // Format price with currency
  const formatPrice = (price, currency, recurrence) => {
    if (currency === 'coins') {
      return (
        <span className="flex items-center">
          {price.toLocaleString()} <span className="text-amber-500 ml-1">‚óè</span>
          {recurrence && <span className="text-xs ml-1">/{recurrence}</span>}
        </span>
      );
    } else if (currency === 'USD') {
      return (
        <span className="flex items-center">
          ${price.toFixed(2)}
          {recurrence && <span className="text-xs ml-1">/{recurrence}</span>}
        </span>
      );
    }
    return price;
  };
  
  // Get icon for item type
  const getItemTypeIcon = (type) => {
    switch(type) {
      case 'Zone':
        return <Home className="w-5 h-5" />;
      case 'Power':
        return <Zap className="w-5 h-5" />;
      case 'Resource':
        return <Layers className="w-5 h-5" />;
      case 'Experience':
        return <Users className="w-5 h-5" />;
      case 'Subscription':
        return <Award className="w-5 h-5" />;
      default:
        return <ShoppingBag className="w-5 h-5" />;
    }
  };
  
  // Get color for economic layer
  const getLayerColor = (layer) => {
    switch(layer) {
      case 'Port':
        return 'bg-amber-100 text-amber-800';
      case 'Laws':
        return 'bg-indigo-100 text-indigo-800';
      case 'Republic':
        return 'bg-emerald-100 text-emerald-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };
  
  return (
    <div className="bg-white rounded-lg shadow-lg overflow-hidden">
      {/* Header */}
      <div className="bg-gradient-to-r from-purple-600 to-indigo-600 text-white p-6">
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-2xl font-bold">Unified Marketplace</h1>
            <p className="text-white/80 mt-1">Discover zones, powers, resources, and experiences</p>
          </div>
          <div className="flex items-center space-x-4">
            <div className="bg-white/20 rounded-lg px-3 py-1 flex items-center">
              <DollarSign className="w-4 h-4 mr-1" />
              <span>{userCoins.toLocaleString()} coins</span>
            </div>
            <div className="relative">
              <ShoppingBag className="w-6 h-6" />
              {cart.length > 0 && (
                <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-4 h-4 flex items-center justify-center">
                  {cart.length}
                </span>
              )}
            </div>
          </div>
        </div>
      </div>
      
      {/* Economic Layer Selector */}
      <div className="bg-gray-100 p-4 border-b">
        <div className="text-sm font-medium text-gray-700 mb-2">Economic Layer:</div>
        <div className="flex space-x-2">
          <button
            className={`px-4 py-2 rounded-lg ${activeLayer === 'All' ? 'bg-gray-800 text-white' : 'bg-white border text-gray-700'}`}
            onClick={() => setActiveLayer('All')}
          >
            All Layers
          </button>
          <button
            className={`px-4 py-2 rounded-lg ${activeLayer === 'Port' ? 'bg-amber-600 text-white' : 'bg-white border text-gray-700'}`}
            onClick={() => setActiveLayer('Port')}
          >
            Port (Open Market)
          </button>
          <button
            className={`px-4 py-2 rounded-lg ${activeLayer === 'Laws' ? 'bg-indigo-600 text-white' : 'bg-white border text-gray-700'}`}
            onClick={() => setActiveLayer('Laws')}
          >
            Laws (Regulated)
          </button>
          <button
            className={`px-4 py-2 rounded-lg ${activeLayer === 'Republic' ? 'bg-emerald-600 text-white' : 'bg-white border text-gray-700'}`}
            onClick={() => setActiveLayer('Republic')}
          >
            Republic (Shared)
          </button>
        </div>
      </div>
      
      {/* Search and Category Filters */}
      <div className="p-4 border-b">
        <div className="flex flex-wrap gap-4">
          {/* Search */}
          <div className="flex-1 min-w-[250px]">
            <div className="relative">
              <input
                type="text"
                placeholder="Search marketplace..."
                className="w-full pl-10 pr-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
              <Search className="absolute left-3 top-2.5 text-gray-400 w-5 h-5" />
            </div>
          </div>
          
          {/* Category Filters */}
          <div className="flex space-x-2 overflow-x-auto">
            <button
              className={`px-4 py-2 rounded-lg flex items-center ${activeCategory === 'All' ? 'bg-indigo-600 text-white' : 'bg-gray-100 text-gray-700'}`}
              onClick={() => setActiveCategory('All')}
            >
              <ShoppingBag className="w-4 h-4 mr-2" />
              All
            </button>
            <button
              className={`px-4 py-2 rounded-lg flex items-center ${activeCategory === 'Zone' ? 'bg-indigo-600 text-white' : 'bg-gray-100 text-gray-700'}`}
              onClick={() => setActiveCategory('Zone')}
            >
              <Home className="w-4 h-4 mr-2" />
              Zones
            </button>
            <button
              className={`px-4 py-2 rounded-lg flex items-center ${activeCategory === 'Power' ? 'bg-indigo-600 text-white' : 'bg-gray-100 text-gray-700'}`}
              onClick={() => setActiveCategory('Power')}
            >
              <Zap className="w-4 h-4 mr-2" />
              Powers
            </button>
            <button
              className={`px-4 py-2 rounded-lg flex items-center ${activeCategory === 'Resource' ? 'bg-indigo-600 text-white' : 'bg-gray-100 text-gray-700'}`}
              onClick={() => setActiveCategory('Resource')}
            >
              <Layers className="w-4 h-4 mr-2" />
              Resources
            </button>
            <button
              className={`px-4 py-2 rounded-lg flex items-center ${activeCategory === 'Experience' ? 'bg-indigo-600 text-white' : 'bg-gray-100 text-gray-700'}`}
              onClick={() => setActiveCategory('Experience')}
            >
              <Users className="w-4 h-4 mr-2" />
              Experiences
            </button>
            <button
              className={`px-4 py-2 rounded-lg flex items-center ${activeCategory === 'Subscription' ? 'bg-indigo-600 text-white' : 'bg-gray-100 text-gray-700'}`}
              onClick={() => setActiveCategory('Subscription')}
            >
              <Award className="w-4 h-4 mr-2" />
              Subscriptions
            </button>
          </div>
        </div>
      </div>
      
      {/* Marketplace Grid */}
      <div className="p-6">
        {items.length === 0 ? (
          <div className="text-center py-12">
            <div className="text-gray-400 mb-2">
              <Search className="w-12 h-12 mx-auto" />
            </div>
            <h3 className="text-lg font-medium text-gray-900">No items found</h3>
            <p className="text-gray-500">Try adjusting your search or filters</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {items.map(item => (
              <div 
                key={item.id} 
                className="border rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow"
                onClick={() => setSelectedItem(item)}
              >
                {/* Item Image */}
                <div className="aspect-video bg-gray-100 relative">
                  {/* This would be an actual image in production */}
                  <div className="w-full h-full flex items-center justify-center">
                    {getItemTypeIcon(item.type)}
                  </div>
                  
                  {/* Economic Layer Badge */}
                  <div className={`absolute top-2 left-2 text-xs px-2 py-1 rounded-full ${getLayerColor(item.economicLayer)}`}>
                    {item.economicLayer}
                  </div>
                  
                  {/* Wishlist Button */}
                  <button 
                    className={`absolute top-2 right-2 w-8 h-8 rounded-full flex items-center justify-center ${isInWishlist(item.id) ? 'bg-red-500 text-white' : 'bg-white/70 text-gray-700'}`}
                    onClick={(e) => {
                      e.stopPropagation();
                      toggleWishlist(item);
                    }}
                  >
                    <Heart className="w-4 h-4" fill={isInWishlist(item.id) ? "#fff" : "none"} />
                  </button>
                  
                  {/* Featured Badge */}
                  {item.featured && (
                    <div className="absolute bottom-2 left-2 bg-amber-500 text-white text-xs px-2 py-1 rounded-full">
                      Featured
                    </div>
                  )}
                </div>
                
                {/* Item Content */}
                <div className="p-4">
                  <div className="flex justify-between items-start mb-2">
                    <div>
                      <div className="text-sm text-gray-500 flex items-center mb-1">
                        {getItemTypeIcon(item.type)}
                        <span className="ml-1">{item.type}</span>
                      </div>
                      <h3 className="font-medium text-gray-900">{item.name}</h3>
                    </div>
                    <div className="text-right">
                      <div className="font-bold text-gray-900">
                        {formatPrice(item.price, item.currency, item.recurrence)}
                      </div>
                      <div className="text-xs text-gray-500">{item.availability}</div>
                    </div>
                  </div>
                  
                  <p className="text-sm text-gray-600 mb-4 line-clamp-2">{item.description}</p>
                  
                  {/* Item Details */}
                  <div className="space-y-2 mb-4">
                    {item.type === 'Zone' && (
                      <>
                        <div className="flex items-center text-sm text-gray-500">
                          <Map className="w-4 h-4 mr-1" />
                          <span>{item.location}</span>
                        </div>
                        <div className="flex items-center text-sm text-gray-500">
                          <Users className="w-4 h-4 mr-1" />
                          <span>Capacity: {item.details.capacity}</span>
                        </div>
                      </>
                    )}
                    
                    {item.type === 'Power' && (
                      <>
                        <div className="flex items-center text-sm text-gray-500">
                          <Tag className="w-4 h-4 mr-1" />
                          <span>{item.details.rarity} ‚Ä¢ {item.details.type}</span>
                        </div>
                        <div className="flex items-center text-sm text-gray-500">
                          <Clock className="w-4 h-4 mr-1" />
                          <span>Duration: {item.details.duration}</span>
                        </div>
                      </>
                    )}
                    
                    {item.type === 'Experience' && (
                      <>
                        <div className="flex items-center text-sm text-gray-500">
                          <Clock className="w-4 h-4 mr-1" />
                          <span>Duration: {item.details.duration}</span>
                        </div>
                        <div className="flex items-center text-sm text-gray-500">
                          <Calendar className="w-4 h-4 mr-1" />
                          <span>{item.schedule}</span>
                        </div>
                      </>
                    )}
                  </div>
                  
                  {/* Seller Info */}
                  <div className="flex justify-between items-center border-t pt-3">
                    <div className="flex items-center text-sm">
                      <div className="w-6 h-6 rounded-full bg-gray-100 flex items-center justify-center mr-2">
                        <User className="w-3 h-3 text-gray-600" />
                      </div>
                      <span className="text-gray-700">{item.seller.name}</span>
                      {item.seller.verified && (
                        <VerifiedBadge className="w-3 h-3 text-blue-500 ml-1" />
                      )}
                    </div>
                    
                    {item.seller.rating && (
                      <div className="flex items-center text-sm text-amber-500">
                        <Star className="w-4 h-4 fill-amber-500 mr-1" />
                        <span>{item.seller.rating}</span>
                      </div>
                    )}
                  </div>
                  
                  {/* Action Buttons */}
                  <div className="flex mt-4 space-x-2">
                    <button 
                      className="flex-1 px-4 py-2 bg-indigo-600 text-white rounded-lg text-sm font-medium"
                      onClick={(e) => {
                        e.stopPropagation();
                        purchaseItem(item);
                      }}
                    >
                      Buy Now
                    </button>
                    <button 
                      className="flex-1 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg text-sm font-medium"
                      onClick={(e) => {
                        e.stopPropagation();
                        addToCart(item);
                      }}
                    >
                      Add to Cart
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
      
      {/* Item Detail Modal */}
      {selectedItem && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex h-full">
              {/* Left Column (Image) */}
              <div className="w-2/5 bg-gray-100 flex items-center justify-center">
                <div className="p-8">
                  {getItemTypeIcon(selectedItem.type)}
                  <div className="text-center mt-4 text-gray-500">Image placeholder</div>
                </div>
              </div>
              
              {/* Right Column (Details) */}
              <div className="w-3/5 overflow-y-auto p-6">
                <div className="flex justify-between items-start">
                  <div>
                    <div className={`text-xs px-2 py-1 rounded-full inline-flex items-center ${getLayerColor(selectedItem.economicLayer)}`}>
                      {selectedItem.economicLayer}
                    </div>
                    <h2 className="text-2xl font-bold text-gray-900 mt-2">{selectedItem.name}</h2>
                    <div className="flex items-center mt-1">
                      <div className="w-6 h-6 rounded-full bg-gray-100 flex items-center justify-center mr-2">
                        <User className="w-3 h-3 text-gray-600" />
                      </div>
                      <span className="text-sm text-gray-700">{selectedItem.seller.name}</span>
                      {selectedItem.seller.verified && (
                        <VerifiedBadge className="w-3 h-3 text-blue-500 ml-1" />
                      )}
                      
                      {selectedItem.seller.rating && (
                        <div className="flex items-center text-sm text-amber-500 ml-3">
                          <Star className="w-4 h-4 fill-amber-500 mr-1" />
                          <span>{selectedItem.seller.rating}</span>
                        </div>
                      )}
                    </div>
                  </div>
                  
                  <button 
                    className="bg-gray-100 rounded-full p-2 hover:bg-gray-200"
                    onClick={() => setSelectedItem(null)}
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
                
                <div className="my-4">
                  <div className="font-bold text-2xl text-gray-900">
                    {formatPrice(selectedItem.price, selectedItem.currency, selectedItem.recurrence)}
                  </div>
                  <div className="text-sm text-gray-500">{selectedItem.availability}</div>
                </div>
                
                <div className="flex gap-2 my-4">
                  <button 
                    className="flex-1 px-4 py-3 bg-indigo-600 text-white rounded-lg font-medium"
                    onClick={() => purchaseItem(selectedItem)}
                  >
                    Buy Now
                  </button>
                  <button 
                    className="flex-1 px-4 py-3 bg-gray-100 text-gray-700 rounded-lg font-medium"
                    onClick={() => addToCart(selectedItem)}
                  >
                    Add to Cart
                  </button>
                  <button 
                    className={`p-3 rounded-lg ${isInWishlist(selectedItem.id) ? 'bg-red-500 text-white' : 'bg-gray-100 text-gray-700'}`}
                    onClick={() => toggleWishlist(selectedItem)}
                  >
                    <Heart className="w-5 h-5" fill={isInWishlist(selectedItem.id) ? "#fff" : "none"} />
                  </button>
                  <button className="p-3 bg-gray-100 text-gray-700 rounded-lg">
                    <Share className="w-5 h-5" />
                  </button>
                </div>
                
                <div className="border-t border-b py-4 my-4">
                  <h3 className="font-medium text-gray-900 mb-2">Description</h3>
                  <p className="text-gray-600">{selectedItem.description}</p>
                </div>
                
                {/* Item-specific details */}
                <div className="my-4">
                  <h3 className="font-medium text-gray-900 mb-3">Details</h3>
                  
                  {selectedItem.type === 'Zone' && (
                    <div className="space-y-4">
                      <div className="flex items-center">
                        <Map className="w-5 h-5 text-gray-500 mr-2" />
                        <span className="text-gray-700">{selectedItem.location}</span>
                      </div>
                      
                      <div className="flex items-center">
                        <Tag className="w-5 h-5 text-gray-500 mr-2" />
                        <span className="text-gray-700">Size: {selectedItem.details.size}</span>
                      </div>
                      
                      <div className="flex items-center">
                        <Users className="w-5 h-5 text-gray-500 mr-2" />
                        <span className="text-gray-700">Capacity: {selectedItem.details.capacity} people</span>
                      </div>
                      
                      <div>
                        <div className="text-gray-700 mb-2">Amenities:</div>
                        <div className="flex flex-wrap gap-2">
                          {selectedItem.details.amenities.map((amenity, index) => (
                            <span key={index} className="bg-gray-100 text-gray-700 px-3 py-1 rounded-full text-sm">
                              {amenity}
                            </span>
                          ))}
                        </div>
                      </div>
                      
                      <div className="flex items-center">
                        <Star className="w-5 h-5 text-amber-500 mr-2" />
                        <span className="text-gray-700">{selectedItem.details.rating} rating ({selectedItem.details.reviews} reviews)</span>
                      </div>
                    </div>
                  )}
                  
                  {selectedItem.type === 'Power' && (
                    <div className="space-y-4">
                      <div className="flex items-center">
                        <Tag className="w-5 h-5 text-gray-500 mr-2" />
                        <span className="text-gray-700">Rarity: {selectedItem.details.rarity}</span>
                      </div>
                      
                      <div className="flex items-center">
                        <Zap className="w-5 h-5 text-gray-500 mr-2" />
                        <span className="text-gray-700">Type: {selectedItem.details.type}</span>
                      </div>
                      
                      <div className="flex items-center">
                        <Clock className="w-5 h-5 text-gray-500 mr-2" />
                        <span className="text-gray-700">Duration: {selectedItem.details.duration}</span>
                      </div>
                      
                      <div className="flex items-center">
                        <Award className="w-5 h-5 text-gray-500 mr-2" />
                        <span className="text-gray-700">Boost: {selectedItem.details.boostAmount}</span>
                      </div>
                    </div>
                  )}
                  
                  {selectedItem.type === 'Resource' && (
                    <div className="space-y-4">
                      <div className="flex items-center">
                        <Layers className="w-5 h-5 text-gray-500 mr-2" />
                        <span className="text-gray-700">Quantity: {selectedItem.details.quantity}</span>
                      </div>
                      
                      <div className="flex items-center">
                        <Star className="w-5 h-5 text-gray-500 mr-2" />
                        <span className="text-gray-700">Quality: {selectedItem.details.quality}</span>
                      </div>
                      
                      <div>
                        <div className="text-gray-700 mb-2">Usable With:</div>
                        <div className="flex flex-wrap gap-2">
                          {selectedItem.details.usableWith.map((item, index) => (
                            <span key={index} className="bg-gray-100 text-gray-700 px-3 py-1 rounded-full text-sm">
                              {item}
                            </span>
                          ))}
                        </div>
                      </div>
                    </div>
                  )}
                  
                  {selectedItem.type === 'Experience' && (
                    <div className="space-y-4">
                      <div className="flex items-center">
                        <Clock className="w-5 h-5 text-gray-500 mr-2" />
                        <span className="text-gray-700">Duration: {selectedItem.details.duration}</span>
                      </div>
                      
                      <div className="flex items-center">
                        <Calendar className="w-5 h-5 text-gray-500 mr-2" />
                        <span className="text-gray-700">Schedule: {selectedItem.schedule}</span>
                      </div>
                      
                      <div className="flex items-center">
                        <Target className="w-5 h-5 text-gray-500 mr-2" />
                        <span className="text-gray-700">Difficulty: {selectedItem.details.difficulty}</span>
                      </div>
                      
                      <div className="flex items-center">
                        <Users className="w-5 h-5 text-gray-500 mr-2" />
                        <span className="text-gray-700">Participants: {selectedItem.details.participants}</span>
                      </div>
                      
                      <div>
                        <div className="text-gray-700 mb-2">Prerequisites:</div>
                        <div className="flex flex-wrap gap-2">
                          {selectedItem.details.prerequisites.map((prereq, index) => (
                            <span key={index} className="bg-gray-100 text-gray-700 px-3 py-1 rounded-full text-sm">
                              {prereq}
                            </span>
                          ))}
                        </div>
                      </div>
                    </div>
                  )}
                  
                  {selectedItem.type === 'Subscription' && (
                    <div className="space-y-4">
                      <div className="flex items-center">
                        <Calendar className="w-5 h-5 text-gray-500 mr-2" />
                        <span className="text-gray-700">Billing: {selectedItem.recurrence}</span>
                      </div>
                      
                      <div className="flex items-center">
                        <Award className="w-5 h-5 text-gray-500 mr-2" />
                        <span className="text-gray-700">Popularity: {selectedItem.details.popularity}</span>
                      </div>
                      
                      <div>
                        <div className="text-gray-700 mb-2">Benefits:</div>
                        <ul className="space-y-2">
                          {selectedItem.details.benefits.map((benefit, index) => (
                            <li key={index} className="flex items-start">
                              <span className="text-green-500 mr-2">‚úì</span>
                              <span className="text-gray-700">{benefit}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                    </div>
                  )}
                </div>
                
                {/* Related items would be here */}
                
                {/* Return/refund policy */}
                <div className="mt-6 pt-4 border-t">
                  <div className="flex items-center text-gray-500 text-sm">
                    <Settings className="w-4 h-4 mr-1" />
                    <span>Marketplace policies apply to this purchase</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
      
      {/* Shopping Cart Overlay */}
      {cart.length > 0 && (
        <div className="fixed bottom-0 right-0 m-6 z-40">
          <div className="bg-white rounded-lg shadow-lg border p-4 w-72">
            <div className="flex justify-between items-center mb-3">
              <h3 className="font-medium text-gray-900">Shopping Cart</h3>
              <span className="text-sm text-gray-500">{cart.length} items</span>
            </div>
            
            <div className="max-h-60 overflow-y-auto mb-3">
              {cart.map(item => (
                <div key={item.id} className="flex items-center py-2 border-b">
                  <div className="w-8 h-8 bg-gray-100 rounded flex items-center justify-center mr-2">
                    {getItemTypeIcon(item.type)}
                  </div>
                  <div className="flex-1">
                    <div className="text-sm font-medium">{item.name}</div>
                    <div className="text-xs text-gray-500">{item.type}</div>
                  </div>
                  <div className="font-medium text-gray-900">
                    {formatPrice(item.price, item.currency)}
                  </div>
                </div>
              ))}
            </div>
            
            <div className="flex justify-between py-2 border-b mb-3">
              <span className="font-medium">Total (Coins)</span>
              <span className="font-bold">{cartTotal.toLocaleString()} <span className="text-amber-500">‚óè</span></span>
            </div>
            
            <button className="w-full py-2 bg-indigo-600 text-white rounded-lg">
              Checkout
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

// User icon component
const User = ({ className }) => (
  <svg 
    xmlns="http://www.w3.org/2000/svg" 
    className={className} 
    fill="none" 
    viewBox="0 0 24 24" 
    stroke="currentColor"
  >
    <path 
      strokeLinecap="round" 
      strokeLinejoin="round" 
      strokeWidth={2} 
      d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" 
    />
  </svg>
);

// Verified badge icon
const VerifiedBadge = ({ className }) => (
  <svg 
    xmlns="http://www.w3.org/2000/svg" 
    className={className} 
    viewBox="0 0 20 20" 
    fill="currentColor"
  >
    <path 
      fillRule="evenodd" 
      d="M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" 
      clipRule="evenodd" 
    />
  </svg>
);

export default UnifiedMarketplaceInterface;