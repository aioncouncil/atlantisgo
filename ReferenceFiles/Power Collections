import React, { useState, useEffect } from 'react';
import { Search, Filter, Award, Zap, BookOpen, Star, Grid, List, ChevronLeft, ChevronRight } from 'lucide-react';

// Sample data - would come from the API in production
const samplePowers = [
  {
    id: 'p001',
    name: 'Dialectic Reasoning',
    category: 'Wisdom',
    type: 'SoulOut',
    rarity: 'Rare',
    mastery: 72,
    description: 'The ability to find truth through reasoned dialogue and questioning.',
    components: {
      definition: 'A method of discourse between two or more people holding different points of view about a subject.',
      end: 'To stimulate critical thinking and reveal truth through dialogue.',
      parts: 'Question and answer, thesis and antithesis, synthesis.',
      matter: 'Arguments, counterarguments, and conceptual frameworks.',
      instrument: 'Logical reasoning and systematic questioning.'
    },
    virtues: {
      wisdom: 15,
      courage: 8,
      temperance: 5,
      justice: 3
    },
    iconUrl: 'https://example.com/powers/dialectic.png',
    collected: true,
    favorited: true
  },
  {
    id: 'p002',
    name: 'Hoplite Discipline',
    category: 'Defenses',
    type: 'BodyOut',
    rarity: 'Uncommon',
    mastery: 45,
    description: 'The strict military discipline of ancient Greek infantry.',
    components: {
      definition: 'The disciplined formation-based combat technique of Greek citizen-soldiers.',
      end: 'To maintain cohesive unit defense while maximizing offensive capability.',
      parts: 'Shield work, spear techniques, formation movement, unit coordination.',
      matter: 'Physical strength, spatial awareness, group psychology.',
      instrument: 'Shield (aspis), spear (dory), and protective armor.'
    },
    virtues: {
      courage: 12,
      wisdom: 4,
      temperance: 9,
      justice: 7
    },
    iconUrl: 'https://example.com/powers/hoplite.png',
    collected: true,
    favorited: false
  },
  {
    id: 'p003',
    name: 'Marketplace Rhetoric',
    category: 'Commerce',
    type: 'BodyIn',
    rarity: 'Common',
    mastery: 88,
    description: 'The art of persuasive communication in commercial settings.',
    components: {
      definition: 'Persuasive speech tailored to commercial transactions and exchanges.',
      end: 'To facilitate mutually beneficial trades and interactions.',
      parts: 'Value proposition, negotiation, storytelling, relationship building.',
      matter: 'Words, tone, gestures, timing, and audience knowledge.',
      instrument: 'Voice, body language, and calculated presentation.'
    },
    virtues: {
      temperance: 10,
      wisdom: 7,
      courage: 5,
      justice: 8
    },
    iconUrl: 'https://example.com/powers/rhetoric.png',
    collected: true,
    favorited: true
  },
  {
    id: 'p004',
    name: 'Symposium Hosting',
    category: 'Vessels',
    type: 'SoulIn',
    rarity: 'Epic',
    mastery: 29,
    description: 'The art of hosting intellectual gatherings for philosophical discourse.',
    components: {
      definition: 'The orchestration of philosophical drinking parties for intellectual exchange.',
      end: 'To create an environment conducive to the sharing and refinement of ideas.',
      parts: 'Invitation curation, topic selection, moderation, atmosphere creation.',
      matter: 'Space, refreshments, participants, and intellectual frameworks.',
      instrument: 'Hosting protocols, conversation guidance, and environmental design.'
    },
    virtues: {
      wisdom: 11,
      temperance: 13,
      justice: 9,
      courage: 6
    },
    iconUrl: 'https://example.com/powers/symposium.png',
    collected: true,
    favorited: false
  },
  {
    id: 'p005',
    name: 'Geometric Harmony',
    category: 'Analysis',
    type: 'SoulOut',
    rarity: 'Legendary',
    mastery: 15,
    description: 'Understanding of mathematical proportions that create aesthetic and functional harmony.',
    components: {
      definition: 'The application of mathematical ratios to create balance and beauty.',
      end: 'To bring order and harmony to design through precise proportions.',
      parts: 'Golden ratio, symmetry, pattern recognition, spatial reasoning.',
      matter: 'Shapes, spaces, measurements, and their relationships.',
      instrument: 'Compass, ruler, mathematical formulas, and visualization.'
    },
    virtues: {
      wisdom: 18,
      temperance: 11,
      justice: 7,
      courage: 3
    },
    iconUrl: 'https://example.com/powers/geometry.png',
    collected: false,
    favorited: false
  },
  // Additional powers would be here
];

const PowerCollectionInterface = () => {
  const [powers, setPowers] = useState(samplePowers);
  const [viewMode, setViewMode] = useState('grid');
  const [selectedPower, setSelectedPower] = useState(null);
  const [filterOptions, setFilterOptions] = useState({
    search: '',
    type: 'All',
    category: 'All',
    rarity: 'All',
    collected: 'All',
    favorited: false
  });
  const [stats, setStats] = useState({
    total: samplePowers.length,
    collected: samplePowers.filter(p => p.collected).length,
    favorite: samplePowers.filter(p => p.favorited).length,
    completion: Math.round((samplePowers.filter(p => p.collected).length / samplePowers.length) * 100)
  });

  // Apply filters to powers
  useEffect(() => {
    let filtered = [...samplePowers];
    
    // Apply search filter
    if (filterOptions.search) {
      const searchLower = filterOptions.search.toLowerCase();
      filtered = filtered.filter(power => 
        power.name.toLowerCase().includes(searchLower) || 
        power.description.toLowerCase().includes(searchLower)
      );
    }
    
    // Apply type filter
    if (filterOptions.type !== 'All') {
      filtered = filtered.filter(power => power.type === filterOptions.type);
    }
    
    // Apply category filter
    if (filterOptions.category !== 'All') {
      filtered = filtered.filter(power => power.category === filterOptions.category);
    }
    
    // Apply rarity filter
    if (filterOptions.rarity !== 'All') {
      filtered = filtered.filter(power => power.rarity === filterOptions.rarity);
    }
    
    // Apply collected filter
    if (filterOptions.collected === 'Collected') {
      filtered = filtered.filter(power => power.collected);
    } else if (filterOptions.collected === 'Missing') {
      filtered = filtered.filter(power => !power.collected);
    }
    
    // Apply favorited filter
    if (filterOptions.favorited) {
      filtered = filtered.filter(power => power.favorited);
    }
    
    setPowers(filtered);
  }, [filterOptions]);

  const handleSearch = (e) => {
    setFilterOptions({...filterOptions, search: e.target.value});
  };

  const handleFilterChange = (field, value) => {
    setFilterOptions({...filterOptions, [field]: value});
  };

  const toggleFavorite = (id) => {
    const updatedPowers = powers.map(power => {
      if (power.id === id) {
        return {...power, favorited: !power.favorited};
      }
      return power;
    });
    setPowers(updatedPowers);
  };

  const toggleViewMode = () => {
    setViewMode(viewMode === 'grid' ? 'list' : 'grid');
  };

  const showPowerDetail = (power) => {
    setSelectedPower(power);
  };

  const closeDetail = () => {
    setSelectedPower(null);
  };

  // Get color based on rarity
  const getRarityColor = (rarity) => {
    switch(rarity) {
      case 'Common': return 'bg-gray-100 text-gray-800';
      case 'Uncommon': return 'bg-green-100 text-green-800';
      case 'Rare': return 'bg-blue-100 text-blue-800';
      case 'Epic': return 'bg-purple-100 text-purple-800';
      case 'Legendary': return 'bg-amber-100 text-amber-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  // Get color based on quadrant
  const getQuadrantColor = (type) => {
    switch(type) {
      case 'SoulOut': return 'bg-indigo-100 text-indigo-800';
      case 'SoulIn': return 'bg-violet-100 text-violet-800';
      case 'BodyOut': return 'bg-emerald-100 text-emerald-800';
      case 'BodyIn': return 'bg-amber-100 text-amber-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-lg overflow-hidden">
      {/* Header with stats */}
      <div className="bg-gradient-to-r from-purple-600 to-indigo-600 text-white p-6">
        <h1 className="text-2xl font-bold mb-2">Power Collection</h1>
        <div className="flex flex-wrap gap-4">
          <div className="bg-white/20 rounded-lg p-3">
            <div className="text-sm opacity-80">Total Powers</div>
            <div className="text-2xl font-bold">{stats.total}</div>
          </div>
          <div className="bg-white/20 rounded-lg p-3">
            <div className="text-sm opacity-80">Collected</div>
            <div className="text-2xl font-bold">{stats.collected}</div>
          </div>
          <div className="bg-white/20 rounded-lg p-3">
            <div className="text-sm opacity-80">Completion</div>
            <div className="text-2xl font-bold">{stats.completion}%</div>
          </div>
          <div className="bg-white/20 rounded-lg p-3">
            <div className="text-sm opacity-80">Favorites</div>
            <div className="text-2xl font-bold">{stats.favorite}</div>
          </div>
        </div>
      </div>
      
      {/* Filters */}
      <div className="border-b p-4">
        <div className="flex flex-wrap gap-4">
          {/* Search */}
          <div className="flex-1 min-w-[200px]">
            <div className="relative">
              <input
                type="text"
                placeholder="Search powers..."
                className="w-full pl-10 pr-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                value={filterOptions.search}
                onChange={handleSearch}
              />
              <Search className="absolute left-3 top-2.5 text-gray-400 w-5 h-5" />
            </div>
          </div>
          
          {/* Filter dropdowns */}
          <div className="flex gap-2">
            <select 
              className="px-3 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500"
              value={filterOptions.type}
              onChange={(e) => handleFilterChange('type', e.target.value)}
            >
              <option value="All">All Types</option>
              <option value="SoulOut">Soul Out</option>
              <option value="SoulIn">Soul In</option>
              <option value="BodyOut">Body Out</option>
              <option value="BodyIn">Body In</option>
            </select>
            
            <select 
              className="px-3 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500"
              value={filterOptions.rarity}
              onChange={(e) => handleFilterChange('rarity', e.target.value)}
            >
              <option value="All">All Rarities</option>
              <option value="Common">Common</option>
              <option value="Uncommon">Uncommon</option>
              <option value="Rare">Rare</option>
              <option value="Epic">Epic</option>
              <option value="Legendary">Legendary</option>
            </select>
            
            <select 
              className="px-3 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500"
              value={filterOptions.collected}
              onChange={(e) => handleFilterChange('collected', e.target.value)}
            >
              <option value="All">All Powers</option>
              <option value="Collected">Collected</option>
              <option value="Missing">Missing</option>
            </select>
            
            <button 
              className={`px-3 py-2 rounded-lg border ${filterOptions.favorited ? 'bg-amber-100 border-amber-300 text-amber-800' : 'border-gray-300 text-gray-700'}`}
              onClick={() => handleFilterChange('favorited', !filterOptions.favorited)}
            >
              <Star className={`w-5 h-5 ${filterOptions.favorited ? 'fill-amber-500 text-amber-500' : 'text-gray-400'}`} />
            </button>
            
            <button 
              className="px-3 py-2 rounded-lg border border-gray-300 text-gray-700"
              onClick={toggleViewMode}
            >
              {viewMode === 'grid' ? <List className="w-5 h-5" /> : <Grid className="w-5 h-5" />}
            </button>
          </div>
        </div>
      </div>
      
      {/* Power Collection Grid/List */}
      <div className="p-6">
        {powers.length === 0 ? (
          <div className="text-center py-8 text-gray-500">
            No powers match your filters. Try adjusting your search.
          </div>
        ) : viewMode === 'grid' ? (
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
            {powers.map(power => (
              <div 
                key={power.id} 
                className={`border rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow cursor-pointer ${!power.collected ? 'opacity-50' : ''}`}
                onClick={() => showPowerDetail(power)}
              >
                <div className="aspect-square bg-gray-100 flex items-center justify-center p-4">
                  {/* This would be an actual image in production */}
                  <div className="w-24 h-24 rounded-full bg-indigo-100 flex items-center justify-center">
                    <Zap className="w-12 h-12 text-indigo-500" />
                  </div>
                </div>
                <div className="p-4">
                  <div className="flex justify-between items-start mb-2">
                    <h3 className="font-medium text-gray-900 truncate">{power.name}</h3>
                    {power.favorited && <Star className="w-4 h-4 text-amber-500 fill-amber-500" />}
                  </div>
                  <div className="flex gap-2 mb-2">
                    <span className={`text-xs px-2 py-1 rounded-full ${getQuadrantColor(power.type)}`}>
                      {power.type}
                    </span>
                    <span className={`text-xs px-2 py-1 rounded-full ${getRarityColor(power.rarity)}`}>
                      {power.rarity}
                    </span>
                  </div>
                  <div className="mt-3">
                    <div className="text-xs text-gray-500 mb-1">Mastery: {power.mastery}%</div>
                    <div className="w-full bg-gray-200 rounded-full h-1.5">
                      <div 
                        className="bg-indigo-600 h-1.5 rounded-full" 
                        style={{ width: `${power.mastery}%` }}
                      ></div>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="space-y-3">
            {powers.map(power => (
              <div 
                key={power.id} 
                className={`border rounded-lg overflow-hidden hover:shadow-md transition-shadow cursor-pointer ${!power.collected ? 'opacity-50' : ''}`}
                onClick={() => showPowerDetail(power)}
              >
                <div className="flex p-4">
                  <div className="w-12 h-12 rounded-full bg-indigo-100 flex items-center justify-center flex-shrink-0 mr-4">
                    <Zap className="w-6 h-6 text-indigo-500" />
                  </div>
                  <div className="flex-1">
                    <div className="flex justify-between items-start">
                      <h3 className="font-medium text-gray-900">{power.name}</h3>
                      {power.favorited && <Star className="w-4 h-4 text-amber-500 fill-amber-500" />}
                    </div>
                    <p className="text-sm text-gray-500 line-clamp-1 mb-2">{power.description}</p>
                    <div className="flex gap-2">
                      <span className={`text-xs px-2 py-1 rounded-full ${getQuadrantColor(power.type)}`}>
                        {power.type}
                      </span>
                      <span className={`text-xs px-2 py-1 rounded-full ${getRarityColor(power.rarity)}`}>
                        {power.rarity}
                      </span>
                    </div>
                  </div>
                  <div className="ml-4 w-24 flex-shrink-0">
                    <div className="text-xs text-gray-500 mb-1 text-right">Mastery: {power.mastery}%</div>
                    <div className="w-full bg-gray-200 rounded-full h-1.5">
                      <div 
                        className="bg-indigo-600 h-1.5 rounded-full" 
                        style={{ width: `${power.mastery}%` }}
                      ></div>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
      
      {/* Power Detail Modal */}
      {selectedPower && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-hidden">
            <div className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white p-6">
              <div className="flex justify-between items-start">
                <h2 className="text-2xl font-bold">{selectedPower.name}</h2>
                <button 
                  className="bg-white/20 rounded-full p-2 hover:bg-white/30"
                  onClick={closeDetail}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
              <div className="flex items-center mt-2">
                <span className={`text-xs px-2 py-1 rounded-full mr-2 ${getQuadrantColor(selectedPower.type)}`}>
                  {selectedPower.type}
                </span>
                <span className={`text-xs px-2 py-1 rounded-full ${getRarityColor(selectedPower.rarity)}`}>
                  {selectedPower.rarity}
                </span>
              </div>
            </div>
            
            <div className="p-6 overflow-y-auto max-h-[calc(90vh-150px)]">
              <div className="flex items-start mb-6">
                <div className="w-24 h-24 rounded-full bg-indigo-100 flex items-center justify-center flex-shrink-0 mr-6">
                  <Zap className="w-12 h-12 text-indigo-500" />
                </div>
                <div>
                  <p className="text-gray-700 mb-4">{selectedPower.description}</p>
                  
                  <div className="mb-4">
                    <div className="text-sm text-gray-500 mb-1">Mastery Progress: {selectedPower.mastery}%</div>
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div 
                        className="bg-indigo-600 h-2 rounded-full" 
                        style={{ width: `${selectedPower.mastery}%` }}
                      ></div>
                    </div>
                  </div>
                  
                  <div className="flex space-x-4 mb-4">
                    <button 
                      className={`px-4 py-2 rounded-lg flex items-center ${selectedPower.favorited ? 'bg-amber-100 text-amber-800' : 'bg-gray-100 text-gray-800'}`}
                      onClick={() => toggleFavorite(selectedPower.id)}
                    >
                      <Star className={`w-5 h-5 mr-2 ${selectedPower.favorited ? 'fill-amber-500 text-amber-500' : ''}`} />
                      {selectedPower.favorited ? 'Favorited' : 'Add to Favorites'}
                    </button>
                    
                    <button className="px-4 py-2 rounded-lg bg-indigo-600 text-white flex items-center">
                      <Award className="w-5 h-5 mr-2" />
                      Practice Power
                    </button>
                  </div>
                </div>
              </div>
              
              <div className="border-t pt-6">
                <h3 className="text-lg font-medium text-gray-900 mb-4">The Five Parts</h3>
                
                <div className="space-y-4">
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <div className="font-medium text-gray-700 mb-1">Definition</div>
                    <p className="text-gray-600">{selectedPower.components.definition}</p>
                  </div>
                  
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <div className="font-medium text-gray-700 mb-1">End (Purpose)</div>
                    <p className="text-gray-600">{selectedPower.components.end}</p>
                  </div>
                  
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <div className="font-medium text-gray-700 mb-1">Parts</div>
                    <p className="text-gray-600">{selectedPower.components.parts}</p>
                  </div>
                  
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <div className="font-medium text-gray-700 mb-1">Matter</div>
                    <p className="text-gray-600">{selectedPower.components.matter}</p>
                  </div>
                  
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <div className="font-medium text-gray-700 mb-1">Instrument</div>
                    <p className="text-gray-600">{selectedPower.components.instrument}</p>
                  </div>
                </div>
              </div>
              
              <div className="border-t pt-6 mt-6">
                <h3 className="text-lg font-medium text-gray-900 mb-4">Virtue Development</h3>
                
                <div className="grid grid-cols-2 gap-4">
                  {Object.entries(selectedPower.virtues).map(([virtue, value]) => (
                    <div key={virtue} className="bg-gray-50 p-4 rounded-lg">
                      <div className="flex justify-between items-center mb-2">
                        <span className="font-medium text-gray-700 capitalize">{virtue}</span>
                        <span className="text-indigo-600">+{value}</span>
                      </div>
                      <div className="w-full bg-gray-200 rounded-full h-1.5">
                        <div 
                          className="bg-indigo-600 h-1.5 rounded-full" 
                          style={{ width: `${(value / 20) * 100}%` }}
                        ></div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
              
              <div className="border-t pt-6 mt-6">
                <h3 className="text-lg font-medium text-gray-900 mb-4">Related Experiences</h3>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="border rounded-lg p-4 hover:bg-gray-50 cursor-pointer">
                    <div className="font-medium text-gray-900">Socratic Dialogue Challenge</div>
                    <div className="text-sm text-gray-500 mb-2">Challenge a friend to a structured philosophical debate.</div>
                    <div className="flex items-center text-indigo-600 text-sm">
                      <BookOpen className="w-4 h-4 mr-1" />
                      <span>Uses Dialectic Reasoning</span>
                    </div>
                  </div>
                  
                  <div className="border rounded-lg p-4 hover:bg-gray-50 cursor-pointer">
                    <div className="font-medium text-gray-900">Academy Symposium</div>
                    <div className="text-sm text-gray-500 mb-2">Join fellow philosophers for a structured discussion.</div>
                    <div className="flex items-center text-indigo-600 text-sm">
                      <BookOpen className="w-4 h-4 mr-1" />
                      <span>Uses Multiple Powers</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="border-t p-4 bg-gray-50 flex justify-between">
              <button className="px-4 py-2 rounded-lg border border-gray-300 flex items-center text-gray-700">
                <ChevronLeft className="w-5 h-5 mr-1" />
                Previous Power
              </button>
              
              <button className="px-4 py-2 rounded-lg border border-gray-300 flex items-center text-gray-700">
                Next Power
                <ChevronRight className="w-5 h-5 ml-1" />
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default PowerCollectionInterface;