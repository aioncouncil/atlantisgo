{"version":3,"file":"GameEntities.js","sourceRoot":"","sources":["../../src/schemas/GameEntities.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @file schemas/GameEntities.ts\n * @description Game entity schemas for Atlantis Go\n * \n * This file defines the core game entities that are synchronized in real-time,\n * including players, powers (collectible arts), and zones.\n */\n\nimport { Schema, type, MapSchema, ArraySchema } from '@colyseus/schema';\nimport { Position, VirtuePoints, UserMetadata } from './index.js';\nimport { PowerCollection } from './PowerSchema.js';\nimport { nanoid } from 'nanoid';\n\n/**\n * Player entity representing a user in the game world\n */\nexport class Player extends Schema {\n  @type(\"string\") id: string;\n  @type(\"string\") username: string;\n  @type(Position) position = new Position(0, 0);\n  @type(\"number\") level: number = 1;\n  @type(\"number\") experience: number = 0;\n  @type(\"string\") avatarUrl: string = \"\";\n  @type(\"number\") lastActive: number = Date.now();\n  @type(UserMetadata) metadata: UserMetadata;\n  @type(VirtuePoints) virtues: VirtuePoints = new VirtuePoints();\n  @type(\"string\") currentZoneId: string = \"\";\n  @type(\"boolean\") isActive: boolean = true;\n  @type(\"number\") lastActivity: number = Date.now();\n  @type(\"string\") state: string = \"idle\"; // idle, moving, interacting, capturing\n  @type({ map: PowerCollection }) powers = new MapSchema<PowerCollection>();\n  @type(\"number\") rank: number = 1;\n  @type(\"number\") xp: number = 0;\n  @type(\"number\") coins: number = 0;\n\n  constructor(id: string, username: string, metadata: UserMetadata) {\n    super();\n    this.id = id;\n    this.username = username;\n    this.metadata = metadata;\n  }\n\n  /**\n   * Update player position\n   * @param x - New x coordinate\n   * @param y - New y coordinate\n   */\n  updatePosition(x: number, y: number): void {\n    this.position.update(x, y);\n    this.lastActivity = Date.now();\n    this.isActive = true;\n  }\n\n  /**\n   * Mark player as inactive after timeout\n   */\n  markInactive(): void {\n    this.isActive = false;\n    this.state = \"idle\";\n  }\n  \n  /**\n   * Add power to player's collection\n   * @param powerId - ID of the captured power\n   * @param powerType - Type of the captured power\n   * @param powerRarity - Rarity of the captured power\n   */\n  addPower(powerId: string, powerType: string, powerRarity: string): void {\n    // Create a new power collection entry\n    const powerCollection = new PowerCollection(powerId, this.id);\n    this.powers.set(powerId, powerCollection);\n    \n    // Update player state\n    this.state = \"idle\";\n    this.lastActivity = Date.now();\n    \n    // In a real implementation, rewards would be calculated based on power properties\n    // For now, we give fixed rewards based on rarity\n    switch (powerRarity) {\n      case \"Legendary\":\n        this.xp += 50;\n        this.coins += 25;\n        break;\n      case \"Epic\":\n        this.xp += 30;\n        this.coins += 15;\n        break;\n      case \"Rare\":\n        this.xp += 20;\n        this.coins += 10;\n        break;\n      case \"Uncommon\":\n        this.xp += 10;\n        this.coins += 5;\n        break;\n      default: // Common\n        this.xp += 5;\n        this.coins += 2;\n        break;\n    }\n    \n    // Check if player has ranked up\n    this.checkRankUp();\n  }\n  \n  /**\n   * Check if player has enough XP to rank up\n   */\n  checkRankUp(): void {\n    const xpRequiredForRankUp = this.rank * 100; // Simple formula: rank * 100 XP needed\n    \n    if (this.xp >= xpRequiredForRankUp && this.rank < 4) {\n      this.rank++;\n      // Notify about rank up would happen here in a full implementation\n    }\n  }\n\n  /**\n   * Update player state\n   * @param state - New state\n   */\n  setState(state: string): void {\n    this.state = state;\n    this.lastActivity = Date.now();\n  }\n\n  /**\n   * Set current zone\n   * @param zoneId - ID of zone player is in\n   */\n  setZone(zoneId: string): void {\n    this.currentZoneId = zoneId;\n  }\n}\n\n/**\n * Power entity representing a collectible art in the game world\n */\nexport class Power extends Schema {\n  @type(\"string\") id: string;\n  @type(\"string\") name: string;\n  @type(\"string\") type: string;\n  @type(\"string\") rarity: string;\n  @type(Position) position = new Position(0, 0);\n  @type(\"number\") spawnTime: number = Date.now();\n  @type(\"number\") despawnTime: number = Date.now() + 3600000; // 1 hour default\n  @type(\"boolean\") isActive: boolean = true;\n  @type(\"number\") challengeDifficulty: number = 1; // 1-100 difficulty to capture\n  \n  // Store the full challenge details separately (not synced directly)\n  captureChallenge: any;\n\n  constructor(id: string, name: string, type: string, rarity: string) {\n    super();\n    this.id = id;\n    this.name = name;\n    this.type = type;\n    this.rarity = rarity;\n  }\n\n  /**\n   * Schedule power to despawn\n   * @param timeMs - Time in milliseconds until despawn\n   */\n  scheduleDespawn(timeMs: number): void {\n    this.despawnTime = Date.now() + timeMs;\n  }\n\n  /**\n   * Set the capture challenge for this power\n   * @param challenge - The challenge details\n   */\n  setCaptureChallenge(challenge: any): void {\n    this.captureChallenge = challenge;\n    \n    // Also set the difficulty value that will be synced\n    if (challenge && challenge.difficulty) {\n      this.challengeDifficulty = challenge.difficulty;\n    }\n  }\n\n  /**\n   * Check if power should be despawned\n   * @returns True if it's time to despawn\n   */\n  shouldDespawn(): boolean {\n    return this.despawnTime > 0 && Date.now() >= this.despawnTime;\n  }\n\n  /**\n   * Deactivate power (e.g., after being captured)\n   */\n  deactivate(): void {\n    this.isActive = false;\n  }\n}\n\n/**\n * Zone entity representing a geographic and functional area\n */\nexport class Zone extends Schema {\n  @type(\"string\") id: string;\n  @type(\"string\") name: string;\n  @type(\"string\") type: string;\n  @type(Position) position = new Position(0, 0);\n  @type(\"number\") radius: number = 100;\n  @type(\"string\") controlledBy: string = \"\";\n  @type(\"number\") lastCaptured: number = 0;\n  @type(\"number\") creationTime: number = Date.now();\n  @type(\"number\") lastActivity: number = Date.now();\n  @type([\"string\"]) currentPlayerIds = new ArraySchema<string>();\n  @type(\"number\") maxCapacity: number = 50;\n  @type(\"boolean\") isActive: boolean = true;\n  attributes: Record<string, any> = {}; // Custom attributes for zone features\n\n  constructor(id: string, name: string, type: string) {\n    super();\n    this.id = id;\n    this.name = name;\n    this.type = type;\n  }\n\n  /**\n   * Add player to zone\n   * @param playerId - ID of player to add\n   * @returns True if added successfully\n   */\n  addPlayer(playerId: string): boolean {\n    if (this.currentPlayerIds.includes(playerId)) return false;\n    if (this.currentPlayerIds.length >= this.maxCapacity) return false;\n    \n    this.currentPlayerIds.push(playerId);\n    this.lastActivity = Date.now();\n    return true;\n  }\n\n  /**\n   * Remove player from zone\n   * @param playerId - ID of player to remove\n   * @returns True if removed successfully\n   */\n  removePlayer(playerId: string): boolean {\n    const index = this.currentPlayerIds.indexOf(playerId);\n    if (index === -1) return false;\n    \n    this.currentPlayerIds.splice(index, 1);\n    this.lastActivity = Date.now();\n    return true;\n  }\n\n  /**\n   * Check if a position is within this zone\n   * @param position - Position to check\n   * @returns True if position is in zone\n   */\n  containsPosition(position: Position): boolean {\n    return this.position.distanceTo(position) <= this.radius;\n  }\n\n  /**\n   * Update zone information\n   * @param name - New zone name\n   * @param description - New zone description\n   */\n  updateInfo(name: string, description: string): void {\n    this.name = name;\n    this.lastActivity = Date.now();\n  }\n\n  /**\n   * Set zone owner\n   * @param ownerId - ID of new owner (user or team)\n   */\n  setOwner(ownerId: string): void {\n    this.controlledBy = ownerId;\n    this.lastActivity = Date.now();\n  }\n}\n"]}