{"version":3,"file":"WorldState.js","sourceRoot":"","sources":["../../src/schemas/WorldState.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @file schemas/WorldState.ts\n * @description World state schema for Atlantis Go\n * \n * This file defines the state that is synchronized between the server and clients\n * for the main world room.\n */\n\nimport { Schema, type, MapSchema } from '@colyseus/schema';\nimport { Player, Power, Zone } from './GameEntities.js';\nimport { Experience, ExperienceInstance } from './ExperienceSchema.js';\n\n/**\n * WorldState contains all synchronized game state\n */\nexport class WorldState extends Schema {\n  // Players currently in the world\n  @type({ map: Player }) players = new MapSchema<Player>();\n  \n  // Powers (collectible arts) currently spawned in the world\n  @type({ map: Power }) powers = new MapSchema<Power>();\n  \n  // Zones in the world\n  @type({ map: Zone }) zones = new MapSchema<Zone>();\n  \n  // Experiences available in the world\n  @type({ map: Experience }) experiences = new MapSchema<Experience>();\n  \n  // Active experience instances\n  @type({ map: ExperienceInstance }) experienceInstances = new MapSchema<ExperienceInstance>();\n  \n  // Global properties\n  @type(\"number\") worldTime: number = Date.now();\n  @type(\"number\") lastUpdateTime: number = Date.now();\n  @type(\"number\") playerCount: number = 0;\n  @type(\"number\") activePowerCount: number = 0;\n  @type(\"number\") activeZoneCount: number = 0;\n  @type(\"number\") activeExperienceCount: number = 0;\n  \n  // Game settings\n  @type(\"number\") visibilityRadius: number = 1000; // meters\n  @type(\"number\") interactionRadius: number = 50; // meters\n  @type(\"number\") playerInactiveTimeout: number = 300000; // 5 minutes in ms\n  @type(\"number\") powerDespawnTime: number = 3600000; // 1 hour in ms\n  \n  constructor() {\n    super();\n  }\n  \n  /**\n   * Update world time\n   */\n  tick(): void {\n    this.worldTime = Date.now();\n    this.lastUpdateTime = Date.now();\n    this.playerCount = this.players.size;\n    this.activePowerCount = this.getActivePowerCount();\n    this.activeZoneCount = this.getActiveZoneCount();\n    this.activeExperienceCount = this.experienceInstances.size;\n  }\n  \n  /**\n   * Get count of active powers\n   */\n  private getActivePowerCount(): number {\n    let count = 0;\n    this.powers.forEach(power => {\n      if (power.isActive) count++;\n    });\n    return count;\n  }\n  \n  /**\n   * Get count of active zones\n   */\n  private getActiveZoneCount(): number {\n    let count = 0;\n    this.zones.forEach(zone => {\n      if (zone.isActive) count++;\n    });\n    return count;\n  }\n  \n  /**\n   * Get nearest power to a position\n   * @param x - X coordinate\n   * @param y - Y coordinate\n   * @param maxDistance - Maximum distance to consider\n   * @returns Nearest power or null if none in range\n   */\n  getNearestPower(x: number, y: number, maxDistance: number): Power | null {\n    let nearestPower: Power | null = null;\n    let minDistance = maxDistance;\n    \n    this.powers.forEach(power => {\n      if (!power.isActive) return;\n      \n      const distance = Math.sqrt(\n        Math.pow(power.position.x - x, 2) + \n        Math.pow(power.position.y - y, 2)\n      );\n      \n      if (distance < minDistance) {\n        minDistance = distance;\n        nearestPower = power;\n      }\n    });\n    \n    return nearestPower;\n  }\n  \n  /**\n   * Get zone at position\n   * @param x - X coordinate\n   * @param y - Y coordinate\n   * @returns Zone or null if no zone at position\n   */\n  getZoneAtPosition(x: number, y: number): Zone | null {\n    let result: Zone | null = null;\n    \n    this.zones.forEach(zone => {\n      if (!zone.isActive) return;\n      \n      const distance = Math.sqrt(\n        Math.pow(zone.center.x - x, 2) + \n        Math.pow(zone.center.y - y, 2)\n      );\n      \n      if (distance <= zone.radius) {\n        // If multiple zones overlap, prefer higher level zones\n        if (!result || zone.level > result.level) {\n          result = zone;\n        }\n      }\n    });\n    \n    return result;\n  }\n  \n  /**\n   * Get all powers within radius of position\n   * @param x - X coordinate\n   * @param y - Y coordinate\n   * @param radius - Search radius\n   * @returns Array of powers within radius\n   */\n  getPowersInRadius(x: number, y: number, radius: number): Power[] {\n    const result: Power[] = [];\n    \n    this.powers.forEach(power => {\n      if (!power.isActive) return;\n      \n      const distance = Math.sqrt(\n        Math.pow(power.position.x - x, 2) + \n        Math.pow(power.position.y - y, 2)\n      );\n      \n      if (distance <= radius) {\n        result.push(power);\n      }\n    });\n    \n    return result;\n  }\n  \n  /**\n   * Get all players within radius of position\n   * @param x - X coordinate\n   * @param y - Y coordinate\n   * @param radius - Search radius\n   * @returns Array of players within radius\n   */\n  getPlayersInRadius(x: number, y: number, radius: number): Player[] {\n    const result: Player[] = [];\n    \n    this.players.forEach(player => {\n      if (!player.isActive) return;\n      \n      const distance = Math.sqrt(\n        Math.pow(player.position.x - x, 2) + \n        Math.pow(player.position.y - y, 2)\n      );\n      \n      if (distance <= radius) {\n        result.push(player);\n      }\n    });\n    \n    return result;\n  }\n  \n  /**\n   * Get experiences in radius of position\n   * @param x - X coordinate\n   * @param y - Y coordinate\n   * @param radius - Search radius\n   * @returns Array of experiences within radius\n   */\n  getExperiencesInRadius(x: number, y: number, radius: number): Experience[] {\n    const result: Experience[] = [];\n    \n    this.experiences.forEach(experience => {\n      if (experience.locationType === \"Anywhere\") {\n        // Always include \"Anywhere\" experiences when in range of any zone\n        const nearbyZone = this.getZoneAtPosition(x, y);\n        if (nearbyZone) {\n          result.push(experience);\n        }\n      } else if (experience.locationType === \"Zone\" && experience.zoneId) {\n        // Check if player is in the specified zone\n        const zone = this.zones.get(experience.zoneId);\n        if (zone) {\n          const distance = Math.sqrt(\n            Math.pow(zone.center.x - x, 2) + \n            Math.pow(zone.center.y - y, 2)\n          );\n          \n          if (distance <= zone.radius) {\n            result.push(experience);\n          }\n        }\n      } else if (experience.locationType === \"Coordinates\") {\n        // Check if player is near the coordinates\n        const distance = Math.sqrt(\n          Math.pow(experience.coordinates.x - x, 2) + \n          Math.pow(experience.coordinates.y - y, 2)\n        );\n        \n        if (distance <= experience.radius) {\n          result.push(experience);\n        }\n      }\n    });\n    \n    return result;\n  }\n  \n  /**\n   * Get experience instance by ID\n   * @param instanceId - ID of the experience instance\n   * @returns ExperienceInstance or undefined if not found\n   */\n  getExperienceInstance(instanceId: string): ExperienceInstance | undefined {\n    return this.experienceInstances.get(instanceId);\n  }\n  \n  /**\n   * Get experience by ID\n   * @param experienceId - ID of the experience\n   * @returns Experience or undefined if not found\n   */\n  getExperience(experienceId: string): Experience | undefined {\n    return this.experiences.get(experienceId);\n  }\n  \n  /**\n   * Get active experience instances for a player\n   * @param playerId - ID of the player\n   * @returns Array of experience instances the player is participating in\n   */\n  getPlayerExperienceInstances(playerId: string): ExperienceInstance[] {\n    const result: ExperienceInstance[] = [];\n    \n    this.experienceInstances.forEach(instance => {\n      if (instance.participants.has(playerId)) {\n        result.push(instance);\n      }\n    });\n    \n    return result;\n  }\n  \n  /**\n   * Get all experience instances in a zone\n   * @param zoneId - ID of the zone\n   * @returns Array of experience instances in the zone\n   */\n  getZoneExperienceInstances(zoneId: string): ExperienceInstance[] {\n    const result: ExperienceInstance[] = [];\n    \n    this.experienceInstances.forEach(instance => {\n      if (instance.zoneId === zoneId) {\n        result.push(instance);\n      }\n    });\n    \n    return result;\n  }\n}\n"]}