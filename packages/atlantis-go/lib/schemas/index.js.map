{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/schemas/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @file schemas/index.ts\n * @description Core schema definitions for Atlantis Go's real-time multiplayer system\n * \n * This file defines the state synchronization schemas used by Colyseus.\n * These schemas determine what data is automatically synchronized between\n * the server and connected clients, providing the real-time foundation for\n * the multiplayer experience.\n */\n\nimport { Schema, type, MapSchema, ArraySchema } from '@colyseus/schema';\nimport { nanoid } from 'nanoid';\n\n/**\n * Position within the game world\n * Used for tracking entity locations and calculating proximity-based interactions\n */\nexport class Position extends Schema {\n  @type(\"number\") x: number = 0;\n  @type(\"number\") y: number = 0;\n  \n  /**\n   * Creates a new Position instance\n   * @param x - Longitude coordinate\n   * @param y - Latitude coordinate\n   */\n  constructor(x: number = 0, y: number = 0) {\n    super();\n    this.x = x;\n    this.y = y;\n  }\n  \n  /**\n   * Calculate distance to another position\n   * @param other - Position to calculate distance to\n   * @returns Distance in coordinate units (not meters)\n   */\n  distanceTo(other: Position): number {\n    const dx = this.x - other.x;\n    const dy = this.y - other.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n  \n  /**\n   * Update position from raw coordinates\n   * @param x - New longitude\n   * @param y - New latitude\n   */\n  update(x: number, y: number): void {\n    this.x = x;\n    this.y = y;\n  }\n  \n  /**\n   * Create a Position from geolocation coordinates\n   * @param latitude - Latitude value\n   * @param longitude - Longitude value\n   * @returns New Position instance\n   */\n  static fromGeoCoordinates(latitude: number, longitude: number): Position {\n    // We're using longitude as x and latitude as y for consistency\n    return new Position(longitude, latitude);\n  }\n  \n  /**\n   * Convert to GeoJSON point format\n   * @returns GeoJSON Point object\n   */\n  toGeoJson(): { type: string, coordinates: number[] } {\n    return {\n      type: \"Point\",\n      coordinates: [this.x, this.y]\n    };\n  }\n}\n\n/**\n * SynchronizedCounter provides an atomic counter that safely synchronizes\n * even with high update frequency\n */\nexport class SynchronizedCounter extends Schema {\n  @type(\"number\") value: number = 0;\n  \n  /**\n   * Creates a new counter with initial value\n   * @param initialValue - Starting value for counter\n   */\n  constructor(initialValue: number = 0) {\n    super();\n    this.value = initialValue;\n  }\n  \n  /**\n   * Increment counter by specified amount\n   * @param amount - Amount to increment (default: 1)\n   * @returns New counter value\n   */\n  increment(amount: number = 1): number {\n    this.value += amount;\n    return this.value;\n  }\n  \n  /**\n   * Decrement counter by specified amount\n   * @param amount - Amount to decrement (default: 1)\n   * @returns New counter value\n   */\n  decrement(amount: number = 1): number {\n    this.value -= amount;\n    return this.value;\n  }\n  \n  /**\n   * Set counter to specific value\n   * @param value - New value for counter\n   */\n  set(value: number): void {\n    this.value = value;\n  }\n}\n\n/**\n * UserMetadata contains minimal information about a user\n * that needs to be shared with other players\n */\nexport class UserMetadata extends Schema {\n  @type(\"string\") userId: string;\n  @type(\"string\") username: string;\n  @type(\"number\") rank: number = 0;\n  @type(\"string\") avatarUrl: string = \"\";\n  \n  constructor(userId: string, username: string) {\n    super();\n    this.userId = userId;\n    this.username = username;\n  }\n}\n\n/**\n * VirtuePoints tracks a user's virtue levels in the game\n */\nexport class VirtuePoints extends Schema {\n  @type(\"number\") wisdom: number = 0;\n  @type(\"number\") courage: number = 0;\n  @type(\"number\") temperance: number = 0;\n  @type(\"number\") justice: number = 0;\n  @type(\"number\") total: number = 0;\n  \n  constructor(\n    wisdom: number = 0,\n    courage: number = 0,\n    temperance: number = 0,\n    justice: number = 0\n  ) {\n    super();\n    this.wisdom = wisdom;\n    this.courage = courage;\n    this.temperance = temperance;\n    this.justice = justice;\n    this.total = this.wisdom + this.courage + this.temperance + this.justice;\n  }\n  \n  /**\n   * Calculate overall happiness score based on virtue points\n   * @returns Happiness score from 0-100\n   */\n  calculateHappiness(): number {\n    // Simple average for now, can be replaced with more complex algorithm\n    return (this.wisdom + this.courage + this.temperance + this.justice) / 4;\n  }\n\n  addPoints(virtue: string, points: number) {\n    switch(virtue.toLowerCase()) {\n      case 'wisdom':\n        this.wisdom += points;\n        break;\n      case 'justice':\n        this.justice += points;\n        break;\n      case 'courage':\n        this.courage += points;\n        break;\n      case 'temperance':\n        this.temperance += points;\n        break;\n    }\n    this.total = this.wisdom + this.justice + this.courage + this.temperance;\n  }\n}\n"]}