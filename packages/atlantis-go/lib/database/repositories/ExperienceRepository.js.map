{"version":3,"file":"ExperienceRepository.js","sourceRoot":"","sources":["../../../src/database/repositories/ExperienceRepository.ts"],"names":[],"mappings":"AAAA;;;GAGG;AA+BH,MAAM,OAAO,oBAAoB;IAAjC;QACU,gBAAW,GAAoC,IAAI,GAAG,EAAE,CAAC;QACzD,cAAS,GAA4C,IAAI,GAAG,EAAE,CAAC;QAC/D,eAAU,GAA4C,IAAI,GAAG,EAAE,CAAC;IAuC1E,CAAC;IArCC,KAAK,CAAC,IAAI,CAAC,KAAU;QACnB,mDAAmD;QACnD,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC;IAC/C,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,EAAU;QACvB,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,IAAiC;QAC5C,MAAM,GAAG,GAAuB;YAC9B,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YAC5C,IAAI,EAAE,IAAI,CAAC,IAAI,IAAI,EAAE;YACrB,WAAW,EAAE,IAAI,CAAC,WAAW,IAAI,EAAE;YACnC,IAAI,EAAE,IAAI,CAAC,IAAI,IAAI,OAAO;YAC1B,MAAM,EAAE,IAAI,CAAC,MAAM,IAAI,OAAO;YAC9B,YAAY,EAAE,IAAI,CAAC,YAAY,IAAI,MAAM;YACzC,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,SAAS,EAAE,IAAI,IAAI,EAAE;SACtB,CAAC;QACF,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACnC,OAAO,GAAG,CAAC;IACb,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAU,EAAE,IAAiC;QACxD,MAAM,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QACrC,IAAI,CAAC,GAAG;YAAE,OAAO,KAAK,CAAC;QAEvB,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,SAAS,EAAE,IAAI,IAAI,EAAE,EAAE,CAAC,CAAC;QACpD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;QAC9B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAU;QACrB,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACrC,CAAC;CACF","sourcesContent":["/**\n * @file repositories/ExperienceRepository.ts\n * @description Mock experience repository for development\n */\n\nexport interface ExperienceDocument {\n  _id: string;\n  name: string;\n  description: string;\n  type: string;\n  status: string;\n  locationType: string;\n  zoneId?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface ExperienceInstanceDocument {\n  _id: string;\n  experienceId: string;\n  status: string;\n  participants: string[];\n  startedAt: Date;\n  endedAt?: Date;\n}\n\nexport interface ExperienceActivityDocument {\n  _id: string;\n  instanceId: string;\n  userId: string;\n  content: string;\n  createdAt: Date;\n}\n\nexport class ExperienceRepository {\n  private experiences: Map<string, ExperienceDocument> = new Map();\n  private instances: Map<string, ExperienceInstanceDocument> = new Map();\n  private activities: Map<string, ExperienceActivityDocument> = new Map();\n\n  async find(query: any): Promise<ExperienceDocument[]> {\n    // Mock implementation that returns all experiences\n    return Array.from(this.experiences.values());\n  }\n\n  async findById(id: string): Promise<ExperienceDocument | null> {\n    return this.experiences.get(id) || null;\n  }\n\n  async create(data: Partial<ExperienceDocument>): Promise<ExperienceDocument> {\n    const doc: ExperienceDocument = {\n      _id: Math.random().toString(36).substring(7),\n      name: data.name || \"\",\n      description: data.description || \"\",\n      type: data.type || \"Quest\",\n      status: data.status || \"Draft\",\n      locationType: data.locationType || \"Zone\",\n      zoneId: data.zoneId,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.experiences.set(doc._id, doc);\n    return doc;\n  }\n\n  async update(id: string, data: Partial<ExperienceDocument>): Promise<boolean> {\n    const doc = this.experiences.get(id);\n    if (!doc) return false;\n\n    Object.assign(doc, data, { updatedAt: new Date() });\n    this.experiences.set(id, doc);\n    return true;\n  }\n\n  async delete(id: string): Promise<boolean> {\n    return this.experiences.delete(id);\n  }\n} "]}