{"version":3,"file":"ExperienceRoom.js","sourceRoot":"","sources":["../../src/rooms/ExperienceRoom.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @file ExperienceRoom.ts\n * @description Colyseus room for handling experience instances\n */\n\nimport { Room, Client } from 'colyseus';\nimport { Schema, type, MapSchema, ArraySchema } from '@colyseus/schema';\nimport { nanoid } from 'nanoid';\n\n// Import services\nimport ExperienceService from '../services/ExperienceService.js';\nimport PowerService from '../services/PowerService.js';\nimport MarketService from '../services/MarketService.js';\n\n// Define experience state schemas\nclass ParticipantState extends Schema {\n  @type(\"string\") id: string;\n  @type(\"string\") name: string;\n  @type(\"string\") avatar: string;\n  @type(\"string\") status: string = \"ACTIVE\"; // ACTIVE, INACTIVE, COMPLETED\n  @type(\"number\") progress: number = 0;\n  @type(\"number\") contribution: number = 0;\n  @type(\"boolean\") isHost: boolean = false;\n  @type(\"number\") joinedAt: number;\n  @type([\"string\"]) achievements = new ArraySchema<string>();\n  @type({ map: \"number\" }) resources = new MapSchema<number>();\n  @type([\"string\"]) activePowers = new ArraySchema<string>();\n}\n\nclass MilestoneState extends Schema {\n  @type(\"string\") id: string;\n  @type(\"string\") title: string;\n  @type(\"string\") description: string;\n  @type(\"string\") status: string = \"PENDING\"; // PENDING, ACTIVE, COMPLETED\n  @type(\"number\") requiredProgress: number;\n  @type(\"number\") actualProgress: number = 0;\n  @type(\"number\") order: number;\n  @type({ map: \"number\" }) rewards = new MapSchema<number>();\n}\n\nclass LocationState extends Schema {\n  @type(\"string\") id: string;\n  @type(\"string\") name: string;\n  @type(\"number\") lat: number;\n  @type(\"number\") lng: number;\n  @type(\"string\") description: string;\n  @type(\"boolean\") isUnlocked: boolean = false;\n  @type({ map: \"string\" }) requirements = new MapSchema<string>();\n  @type([\"string\"]) discoveredBy = new ArraySchema<string>();\n}\n\nclass ActionState extends Schema {\n  @type(\"string\") id: string;\n  @type(\"string\") userId: string;\n  @type(\"string\") type: string;\n  @type(\"string\") target: string;\n  @type(\"number\") timestamp: number;\n  @type(\"boolean\") isProcessed: boolean = false;\n  @type(\"number\") value: number = 0;\n  @type({ map: \"any\" }) metadata = new MapSchema<any>();\n}\n\nclass ExperienceState extends Schema {\n  @type(\"string\") id: string;\n  @type(\"string\") name: string;\n  @type(\"string\") description: string;\n  @type(\"string\") type: string;\n  @type(\"string\") status: string = \"WAITING\"; // WAITING, IN_PROGRESS, PAUSED, COMPLETED, FAILED\n  @type(\"string\") phase: string = \"PULL\"; // PULL, THINK, DO, REVIEW\n  @type(\"number\") startedAt: number = 0;\n  @type(\"number\") endedAt: number = 0;\n  @type(\"number\") maxParticipants: number = 4;\n  @type(\"number\") minParticipants: number = 1;\n  @type(\"number\") currentProgress: number = 0;\n  @type(\"number\") targetProgress: number = 100;\n  @type(\"number\") timeLimit: number = 3600; // in seconds\n  @type(\"number\") timeRemaining: number = 3600;\n  @type({ map: ParticipantState }) participants = new MapSchema<ParticipantState>();\n  @type([MilestoneState]) milestones = new ArraySchema<MilestoneState>();\n  @type([LocationState]) locations = new ArraySchema<LocationState>();\n  @type([ActionState]) recentActions = new ArraySchema<ActionState>();\n  @type({ map: \"any\" }) metadata = new MapSchema<any>();\n}\n\n/**\n * Experience Room for handling experience instances\n */\nexport class ExperienceRoom extends Room<ExperienceState> {\n  private experienceData: any;\n  private tickInterval: NodeJS.Timeout;\n  private actionCount: number = 0;\n  \n  async onCreate(options: any) {\n    // Initialize state\n    this.setState(new ExperienceState());\n    \n    // Load experience data\n    try {\n      if (options.experienceId) {\n        this.experienceData = await ExperienceService.getExperienceById(options.experienceId);\n        \n        if (!this.experienceData) {\n          throw new Error(`Experience with ID ${options.experienceId} not found`);\n        }\n        \n        // Configure room based on experience data\n        this.state.id = this.experienceData._id.toString();\n        this.state.name = this.experienceData.name;\n        this.state.description = this.experienceData.description;\n        this.state.type = this.experienceData.type;\n        this.state.maxParticipants = this.experienceData.capacity?.max || 4;\n        this.state.minParticipants = this.experienceData.capacity?.min || 1;\n        this.state.targetProgress = this.experienceData.requirements?.progress || 100;\n        this.state.timeLimit = this.experienceData.timeLimit || 3600;\n        this.state.timeRemaining = this.state.timeLimit;\n        \n        // Add milestones\n        if (this.experienceData.milestones && this.experienceData.milestones.length > 0) {\n          this.experienceData.milestones.forEach((milestone, index) => {\n            const milestoneState = new MilestoneState();\n            milestoneState.id = milestone._id?.toString() || nanoid();\n            milestoneState.title = milestone.title;\n            milestoneState.description = milestone.description;\n            milestoneState.requiredProgress = milestone.requiredProgress;\n            milestoneState.order = index;\n            \n            if (milestone.rewards) {\n              Object.entries(milestone.rewards).forEach(([key, value]) => {\n                milestoneState.rewards[key] = value as number;\n              });\n            }\n            \n            this.state.milestones.push(milestoneState);\n          });\n        }\n        \n        // Add locations if applicable\n        if (this.experienceData.locations && this.experienceData.locations.length > 0) {\n          this.experienceData.locations.forEach(location => {\n            const locationState = new LocationState();\n            locationState.id = location._id?.toString() || nanoid();\n            locationState.name = location.name;\n            locationState.lat = location.coordinates?.lat || 0;\n            locationState.lng = location.coordinates?.lng || 0;\n            locationState.description = location.description;\n            locationState.isUnlocked = location.isStartingPoint || false;\n            \n            if (location.requirements) {\n              Object.entries(location.requirements).forEach(([key, value]) => {\n                locationState.requirements[key] = value as string;\n              });\n            }\n            \n            this.state.locations.push(locationState);\n          });\n        }\n      } else {\n        // Create a quick generic experience if none specified\n        this.state.id = nanoid();\n        this.state.name = options.name || \"Dynamic Experience\";\n        this.state.description = options.description || \"An impromptu experience\";\n        this.state.type = options.type || \"QUEST\";\n      }\n      \n      // Set up room metadata\n      this.setMetadata({\n        name: this.state.name,\n        type: this.state.type,\n        maxParticipants: this.state.maxParticipants\n      });\n    } catch (error) {\n      console.error(\"Error setting up experience room:\", error);\n      this.state.status = \"FAILED\";\n    }\n    \n    // Register message handlers\n    this.registerMessageHandlers();\n    \n    // Set tick interval for game updates\n    this.tickInterval = setInterval(() => this.tick(), 1000);\n    \n    console.log(`Experience room created: ${this.state.name} (${this.state.id})`);\n  }\n\n  onJoin(client: Client, options: any) {\n    try {\n      // Check if experience can accept new participants\n      if (this.state.status === \"COMPLETED\" || this.state.status === \"FAILED\") {\n        throw new Error(\"Cannot join a completed or failed experience\");\n      }\n      \n      if (Object.keys(this.state.participants).length >= this.state.maxParticipants) {\n        throw new Error(\"Experience is at max capacity\");\n      }\n      \n      // Create participant state\n      const participant = new ParticipantState();\n      participant.id = client.sessionId;\n      participant.name = options.name || \"Anonymous\";\n      participant.avatar = options.avatar || \"default.png\";\n      participant.joinedAt = Date.now();\n      participant.isHost = Object.keys(this.state.participants).length === 0; // First participant is host\n      \n      // Add to state\n      this.state.participants[client.sessionId] = participant;\n      \n      // Check if experience can start\n      this.checkExperienceStatus();\n      \n      console.log(`Participant ${participant.name} (${client.sessionId}) joined experience ${this.state.name}`);\n    } catch (error) {\n      console.error(`Error on client join:`, error);\n      // Force disconnect with error message\n      client.leave(1000, error.message);\n    }\n  }\n  \n  onLeave(client: Client, consented: boolean) {\n    if (this.state.participants[client.sessionId]) {\n      const participant = this.state.participants[client.sessionId];\n      \n      // If the host leaves, assign a new host if possible\n      if (participant.isHost) {\n        const remainingParticipants = Object.entries(this.state.participants)\n          .filter(([id]) => id !== client.sessionId);\n          \n        if (remainingParticipants.length > 0) {\n          // Assign the oldest participant as the new host\n          const oldestParticipant = remainingParticipants.sort(([, a], [, b]) => \n            a.joinedAt - b.joinedAt\n          )[0];\n          \n          this.state.participants[oldestParticipant[0]].isHost = true;\n        }\n      }\n      \n      // Mark participant as inactive instead of removing immediately\n      participant.status = \"INACTIVE\";\n      \n      console.log(`Participant ${participant.name} (${client.sessionId}) left experience ${this.state.name}`);\n      \n      // Check if experience can continue\n      this.checkExperienceStatus();\n      \n      // Remove participant after a grace period (in case they reconnect)\n      setTimeout(() => {\n        if (this.state.participants[client.sessionId]?.status === \"INACTIVE\") {\n          delete this.state.participants[client.sessionId];\n          console.log(`Participant ${participant.name} (${client.sessionId}) removed from experience ${this.state.name}`);\n        }\n      }, 60000); // 1 minute grace period\n    }\n  }\n  \n  onDispose() {\n    // Clean up timers\n    if (this.tickInterval) {\n      clearInterval(this.tickInterval);\n    }\n    \n    // Record experience completion\n    this.finalizeExperience();\n    \n    console.log(`Experience room disposed: ${this.state.name} (${this.state.id})`);\n  }\n  \n  /**\n   * Register message handlers for client<>server communication\n   */\n  private registerMessageHandlers() {\n    this.onMessage(\"action\", (client, data) => {\n      this.handleClientAction(client, data);\n    });\n    \n    this.onMessage(\"chat\", (client, message) => {\n      if (this.state.participants[client.sessionId]) {\n        this.broadcast(\"chat\", {\n          sender: this.state.participants[client.sessionId].name,\n          senderId: client.sessionId,\n          text: message,\n          timestamp: Date.now()\n        });\n      }\n    });\n    \n    this.onMessage(\"usePower\", (client, data) => {\n      this.handlePowerUse(client, data);\n    });\n    \n    this.onMessage(\"milestone\", (client, data) => {\n      this.handleMilestoneUpdate(client, data);\n    });\n    \n    this.onMessage(\"location\", (client, data) => {\n      this.handleLocationDiscovery(client, data);\n    });\n    \n    this.onMessage(\"status\", (client, status) => {\n      if (this.state.participants[client.sessionId]) {\n        const participant = this.state.participants[client.sessionId];\n        participant.status = status;\n        \n        // Check if experience can continue or is completed\n        this.checkExperienceStatus();\n      }\n    });\n    \n    this.onMessage(\"host\", (client, command) => {\n      // Host-only commands\n      if (this.state.participants[client.sessionId]?.isHost) {\n        switch (command.type) {\n          case \"start\":\n            this.startExperience();\n            break;\n          case \"pause\":\n            this.pauseExperience();\n            break;\n          case \"resume\":\n            this.resumeExperience();\n            break;\n          case \"end\":\n            this.endExperience(command.success || false);\n            break;\n          case \"nextPhase\":\n            this.advancePhase();\n            break;\n        }\n      }\n    });\n  }\n  \n  /**\n   * Handle client action\n   */\n  private handleClientAction(client: Client, data: any) {\n    if (!this.state.participants[client.sessionId]) return;\n    if (this.state.status !== \"IN_PROGRESS\") return;\n    \n    try {\n      const participant = this.state.participants[client.sessionId];\n      \n      // Create action record\n      const action = new ActionState();\n      action.id = `${this.actionCount++}`;\n      action.userId = client.sessionId;\n      action.type = data.type;\n      action.target = data.target || \"\";\n      action.timestamp = Date.now();\n      action.value = data.value || 1;\n      \n      if (data.metadata) {\n        Object.entries(data.metadata).forEach(([key, value]) => {\n          action.metadata[key] = value;\n        });\n      }\n      \n      // Process action based on type\n      switch (data.type) {\n        case \"PROGRESS\":\n          // Add to participant and overall progress\n          participant.progress += data.value || 1;\n          participant.contribution += data.value || 1;\n          this.updateProgress(data.value || 1);\n          break;\n          \n        case \"RESOURCE_COLLECT\":\n          // Add resource to participant\n          const resourceType = data.resourceType || \"DEFAULT\";\n          participant.resources[resourceType] = (participant.resources[resourceType] || 0) + (data.value || 1);\n          break;\n          \n        case \"INTERACTION\":\n          // Just record the interaction\n          break;\n      }\n      \n      // Add to recent actions\n      this.state.recentActions.push(action);\n      \n      // Keep only the last 20 actions\n      while (this.state.recentActions.length > 20) {\n        this.state.recentActions.shift();\n      }\n      \n      // Mark action as processed\n      action.isProcessed = true;\n      \n      // Trigger random power discovery chance\n      this.checkPowerDiscovery(client.sessionId, action);\n      \n    } catch (error) {\n      console.error(\"Error processing client action:\", error);\n    }\n  }\n  \n  /**\n   * Handle power use by participant\n   */\n  private async handlePowerUse(client: Client, data: any) {\n    if (!this.state.participants[client.sessionId]) return;\n    if (this.state.status !== \"IN_PROGRESS\") return;\n    \n    try {\n      const result = await PowerService.usePower(\n        client.sessionId,\n        data.powerId,\n        {\n          location: data.location,\n          experienceId: this.state.id,\n          experienceType: this.state.type,\n          phase: this.state.phase\n        }\n      );\n      \n      // Send result back to client\n      this.send(client, \"powerResult\", {\n        powerId: data.powerId,\n        success: result.success,\n        effect: result.effect,\n        cooldown: result.cooldown,\n        error: result.error\n      });\n      \n      // If successful, broadcast power use to all participants\n      if (result.success) {\n        const participant = this.state.participants[client.sessionId];\n        \n        // Add to active powers if not already there\n        if (!participant.activePowers.includes(data.powerId)) {\n          participant.activePowers.push(data.powerId);\n          \n          // Remove after effect duration expires\n          const effectDuration = result.effect?.[0]?.duration || 60;\n          setTimeout(() => {\n            const index = participant.activePowers.indexOf(data.powerId);\n            if (index !== -1) {\n              participant.activePowers.splice(index, 1);\n            }\n          }, effectDuration * 1000);\n        }\n        \n        // Broadcast to room\n        this.broadcast(\"powerUsed\", {\n          userId: client.sessionId,\n          userName: participant.name,\n          powerId: data.powerId,\n          effect: result.effect\n        });\n      }\n    } catch (error) {\n      console.error(\"Error processing power use:\", error);\n    }\n  }\n  \n  /**\n   * Handle milestone updates\n   */\n  private handleMilestoneUpdate(client: Client, data: any) {\n    if (!this.state.participants[client.sessionId]?.isHost) return;\n    \n    try {\n      const milestone = this.state.milestones.find(m => m.id === data.id);\n      if (milestone) {\n        if (data.status) milestone.status = data.status;\n        if (data.actualProgress !== undefined) milestone.actualProgress = data.actualProgress;\n        \n        // Check if milestone is completed\n        if (milestone.status !== \"COMPLETED\" && milestone.actualProgress >= milestone.requiredProgress) {\n          milestone.status = \"COMPLETED\";\n          \n          // Broadcast milestone completion\n          this.broadcast(\"milestoneCompleted\", {\n            id: milestone.id,\n            title: milestone.title,\n            rewards: Object.fromEntries(milestone.rewards.entries())\n          });\n          \n          // Distribute rewards if specified\n          if (data.distributeRewards && Object.keys(milestone.rewards).length > 0) {\n            this.distributeMilestoneRewards(milestone);\n          }\n        }\n      }\n    } catch (error) {\n      console.error(\"Error updating milestone:\", error);\n    }\n  }\n  \n  /**\n   * Handle location discovery\n   */\n  private handleLocationDiscovery(client: Client, data: any) {\n    if (!this.state.participants[client.sessionId]) return;\n    \n    try {\n      const location = this.state.locations.find(l => l.id === data.id);\n      if (location && !location.discoveredBy.includes(client.sessionId)) {\n        // Add user to discovered list\n        location.discoveredBy.push(client.sessionId);\n        \n        // Check if this unlocks the location\n        if (!location.isUnlocked) {\n          const allRequirementsMet = Object.entries(location.requirements).every(([req, val]) => {\n            // Check if requirement is met\n            switch (req) {\n              case \"minDiscoverers\":\n                return location.discoveredBy.length >= parseInt(val);\n              case \"previousLocation\":\n                const prevLoc = this.state.locations.find(l => l.id === val);\n                return prevLoc && prevLoc.isUnlocked;\n              default:\n                return true;\n            }\n          });\n          \n          if (allRequirementsMet) {\n            location.isUnlocked = true;\n            \n            // Broadcast location unlock\n            this.broadcast(\"locationUnlocked\", {\n              id: location.id,\n              name: location.name,\n              discoveredBy: Array.from(location.discoveredBy)\n            });\n          }\n        }\n      }\n    } catch (error) {\n      console.error(\"Error processing location discovery:\", error);\n    }\n  }\n  \n  /**\n   * Game tick - update timers and state\n   */\n  private tick() {\n    if (this.state.status !== \"IN_PROGRESS\") return;\n    \n    // Update time remaining\n    if (this.state.timeLimit > 0) {\n      this.state.timeRemaining = Math.max(0, this.state.timeRemaining - 1);\n      \n      // Check for time expiration\n      if (this.state.timeRemaining <= 0) {\n        // Determine if experience was successful based on progress\n        const success = this.state.currentProgress >= this.state.targetProgress;\n        this.endExperience(success);\n        return;\n      }\n    }\n    \n    // Update current milestone progress\n    const activeMilestone = this.state.milestones.find(m => m.status === \"ACTIVE\");\n    if (activeMilestone) {\n      activeMilestone.actualProgress = Math.min(\n        activeMilestone.requiredProgress,\n        this.state.currentProgress\n      );\n      \n      // Check if milestone is complete\n      if (activeMilestone.actualProgress >= activeMilestone.requiredProgress) {\n        activeMilestone.status = \"COMPLETED\";\n        \n        // Broadcast milestone completion\n        this.broadcast(\"milestoneCompleted\", {\n          id: activeMilestone.id,\n          title: activeMilestone.title,\n          rewards: Object.fromEntries(activeMilestone.rewards.entries())\n        });\n        \n        // Distribute rewards\n        this.distributeMilestoneRewards(activeMilestone);\n        \n        // Activate next milestone\n        const nextMilestone = this.state.milestones\n          .filter(m => m.status === \"PENDING\")\n          .sort((a, b) => a.order - b.order)[0];\n          \n        if (nextMilestone) {\n          nextMilestone.status = \"ACTIVE\";\n          \n          // Broadcast next milestone activation\n          this.broadcast(\"milestoneActivated\", {\n            id: nextMilestone.id,\n            title: nextMilestone.title,\n            requiredProgress: nextMilestone.requiredProgress\n          });\n        }\n      }\n    }\n  }\n  \n  /**\n   * Start the experience\n   */\n  private startExperience() {\n    if (this.state.status !== \"WAITING\") return;\n    \n    // Check if we have minimum participants\n    if (Object.keys(this.state.participants).length < this.state.minParticipants) {\n      this.broadcast(\"notification\", {\n        type: \"error\",\n        message: `Need at least ${this.state.minParticipants} participants to start`\n      });\n      return;\n    }\n    \n    // Set state and record start time\n    this.state.status = \"IN_PROGRESS\";\n    this.state.startedAt = Date.now();\n    \n    // Activate first milestone\n    const firstMilestone = this.state.milestones\n      .sort((a, b) => a.order - b.order)[0];\n      \n    if (firstMilestone) {\n      firstMilestone.status = \"ACTIVE\";\n      \n      // Broadcast milestone activation\n      this.broadcast(\"milestoneActivated\", {\n        id: firstMilestone.id,\n        title: firstMilestone.title,\n        requiredProgress: firstMilestone.requiredProgress\n      });\n    }\n    \n    // Broadcast start event\n    this.broadcast(\"experienceStarted\", {\n      startedAt: this.state.startedAt,\n      timeLimit: this.state.timeLimit,\n      targetProgress: this.state.targetProgress\n    });\n    \n    console.log(`Experience ${this.state.name} started with ${Object.keys(this.state.participants).length} participants`);\n  }\n  \n  /**\n   * Pause the experience\n   */\n  private pauseExperience() {\n    if (this.state.status !== \"IN_PROGRESS\") return;\n    \n    this.state.status = \"PAUSED\";\n    \n    // Broadcast pause event\n    this.broadcast(\"experiencePaused\", {\n      pausedAt: Date.now(),\n      timeRemaining: this.state.timeRemaining\n    });\n    \n    console.log(`Experience ${this.state.name} paused with ${this.state.timeRemaining}s remaining`);\n  }\n  \n  /**\n   * Resume the experience\n   */\n  private resumeExperience() {\n    if (this.state.status !== \"PAUSED\") return;\n    \n    this.state.status = \"IN_PROGRESS\";\n    \n    // Broadcast resume event\n    this.broadcast(\"experienceResumed\", {\n      resumedAt: Date.now(),\n      timeRemaining: this.state.timeRemaining\n    });\n    \n    console.log(`Experience ${this.state.name} resumed with ${this.state.timeRemaining}s remaining`);\n  }\n  \n  /**\n   * End the experience\n   */\n  private endExperience(success: boolean = true) {\n    if (this.state.status !== \"IN_PROGRESS\" && this.state.status !== \"PAUSED\") return;\n    \n    this.state.status = success ? \"COMPLETED\" : \"FAILED\";\n    this.state.endedAt = Date.now();\n    \n    // Broadcast end event\n    this.broadcast(\"experienceEnded\", {\n      endedAt: this.state.endedAt,\n      success,\n      duration: Math.floor((this.state.endedAt - this.state.startedAt) / 1000),\n      progress: this.state.currentProgress,\n      target: this.state.targetProgress\n    });\n    \n    // Finalize the experience record\n    this.finalizeExperience();\n    \n    console.log(`Experience ${this.state.name} ended with success=${success}, progress=${this.state.currentProgress}/${this.state.targetProgress}`);\n  }\n  \n  /**\n   * Advance to next phase of the experience\n   */\n  private advancePhase() {\n    const phases = [\"PULL\", \"THINK\", \"DO\", \"REVIEW\"];\n    const currentIndex = phases.indexOf(this.state.phase);\n    \n    if (currentIndex >= 0 && currentIndex < phases.length - 1) {\n      this.state.phase = phases[currentIndex + 1];\n      \n      // Broadcast phase change\n      this.broadcast(\"phaseChanged\", {\n        phase: this.state.phase,\n        timestamp: Date.now()\n      });\n      \n      console.log(`Experience ${this.state.name} advanced to phase ${this.state.phase}`);\n    } else if (currentIndex === phases.length - 1) {\n      // If we're at the last phase, complete the experience\n      this.endExperience(true);\n    }\n  }\n  \n  /**\n   * Update overall progress\n   */\n  private updateProgress(amount: number) {\n    // Update current progress\n    this.state.currentProgress = Math.min(\n      this.state.targetProgress,\n      this.state.currentProgress + amount\n    );\n    \n    // Check if experience is complete based on progress\n    if (this.state.currentProgress >= this.state.targetProgress) {\n      this.endExperience(true);\n    }\n  }\n  \n  /**\n   * Distribute rewards for milestone completion\n   */\n  private distributeMilestoneRewards(milestone: MilestoneState) {\n    try {\n      // Get all active participants\n      const activeParticipants = Object.entries(this.state.participants)\n        .filter(([, p]) => p.status === \"ACTIVE\");\n      \n      if (activeParticipants.length === 0) return;\n      \n      // Extract rewards\n      const rewards = Object.fromEntries(milestone.rewards.entries());\n      \n      // Distribute to participants\n      activeParticipants.forEach(([id, participant]) => {\n        // Add resources to participant\n        Object.entries(rewards).forEach(([key, value]) => {\n          participant.resources[key] = (participant.resources[key] || 0) + (value as number);\n        });\n        \n        // Send reward notification\n        this.send(this.clients.get(id), \"reward\", {\n          type: \"milestone\",\n          milestoneId: milestone.id,\n          milestoneTitle: milestone.title,\n          rewards\n        });\n      });\n    } catch (error) {\n      console.error(\"Error distributing milestone rewards:\", error);\n    }\n  }\n  \n  /**\n   * Check for random power discovery chances\n   */\n  private async checkPowerDiscovery(userId: string, action: ActionState) {\n    try {\n      // Each action has a small chance to discover a power\n      if (Math.random() < 0.05) { // 5% chance\n        const discoveredPower = await PowerService.generateRandomPowerDrop(\n          userId,\n          {\n            location: action.metadata.location,\n            experienceId: this.state.id,\n            experienceType: this.state.type,\n            actionType: action.type,\n            discoveryMethod: \"EXPERIENCE_ACTION\"\n          }\n        );\n        \n        if (discoveredPower) {\n          // Send power discovery notification to this player only\n          this.send(this.clients.get(userId), \"powerDiscovered\", {\n            powerId: discoveredPower._id.toString(),\n            name: discoveredPower.name,\n            type: discoveredPower.type,\n            rarity: discoveredPower.rarity,\n            description: discoveredPower.description,\n            context: action.type\n          });\n        }\n      }\n    } catch (error) {\n      console.error(\"Error checking for power discovery:\", error);\n    }\n  }\n  \n  /**\n   * Check if experience status needs to change\n   */\n  private checkExperienceStatus() {\n    // Count active participants\n    const activeParticipants = Object.values(this.state.participants)\n      .filter(p => p.status === \"ACTIVE\").length;\n    \n    // If in progress but below minimum participants, pause\n    if (this.state.status === \"IN_PROGRESS\" && activeParticipants < this.state.minParticipants) {\n      this.pauseExperience();\n    }\n    \n    // If everyone is \"COMPLETED\", end the experience\n    const allCompleted = Object.values(this.state.participants).length > 0 && \n      Object.values(this.state.participants).every(p => p.status === \"COMPLETED\");\n      \n    if (allCompleted) {\n      this.endExperience(true);\n    }\n  }\n  \n  /**\n   * Save experience outcome to database\n   */\n  private async finalizeExperience() {\n    try {\n      if (this.state.startedAt === 0) return; // Experience never started\n      \n      // Create summary of participants\n      const participants = Object.entries(this.state.participants).map(([id, p]) => ({\n        userId: id,\n        name: p.name,\n        progress: p.progress,\n        contribution: p.contribution,\n        status: p.status,\n        resources: Object.fromEntries(p.resources.entries()),\n        achievements: Array.from(p.achievements)\n      }));\n      \n      // Create experience instance record\n      await ExperienceService.createExperienceInstance({\n        experienceId: this.state.id,\n        name: this.state.name,\n        type: this.state.type,\n        startedAt: new Date(this.state.startedAt),\n        endedAt: new Date(this.state.endedAt || Date.now()),\n        status: this.state.status,\n        progress: {\n          current: this.state.currentProgress,\n          target: this.state.targetProgress\n        },\n        participants,\n        milestones: this.state.milestones.map(m => ({\n          id: m.id,\n          title: m.title,\n          status: m.status,\n          progress: m.actualProgress,\n          required: m.requiredProgress\n        })),\n        metadata: Object.fromEntries(this.state.metadata.entries())\n      });\n      \n      // Reward participants with coins and resources\n      await this.rewardParticipants();\n      \n    } catch (error) {\n      console.error(\"Error finalizing experience:\", error);\n    }\n  }\n  \n  /**\n   * Distribute final rewards to participants\n   */\n  private async rewardParticipants() {\n    try {\n      const success = this.state.status === \"COMPLETED\";\n      const participants = Object.entries(this.state.participants);\n      \n      for (const [id, participant] of participants) {\n        // Calculate reward based on contribution and success\n        const progressPercent = this.state.targetProgress > 0 ? \n          this.state.currentProgress / this.state.targetProgress : 0;\n          \n        const contributionPercent = participant.contribution / \n          Math.max(1, this.state.currentProgress);\n          \n        // Base rewards\n        const baseCoins = success ? 50 : 10;\n        const progressBonus = Math.floor(progressPercent * 100);\n        const contributionBonus = Math.floor(contributionPercent * 100);\n        \n        const totalCoins = baseCoins + progressBonus + contributionBonus;\n        \n        // Basic resources based on experience type\n        const resources = {\n          DATA: Math.floor(progressPercent * 20),\n          ENERGY: Math.floor(progressPercent * 15)\n        };\n        \n        // Add special resources based on experience type\n        switch (this.state.type) {\n          case \"QUEST\":\n            resources.WISDOM = Math.floor(progressPercent * 10);\n            break;\n          case \"CHALLENGE\":\n            resources.INFLUENCE = Math.floor(progressPercent * 5);\n            break;\n          case \"EXPEDITION\":\n            resources.MATERIALS = Math.floor(progressPercent * 10);\n            break;\n        }\n        \n        // Create reward transaction\n        await MarketService.createRewardTransaction(id, {\n          coins: totalCoins,\n          resources\n        });\n        \n        // Send final rewards notification\n        this.send(this.clients.get(id), \"finalRewards\", {\n          coins: totalCoins,\n          resources,\n          bonuses: {\n            progress: progressBonus,\n            contribution: contributionBonus\n          },\n          experienceId: this.state.id,\n          experienceName: this.state.name\n        });\n      }\n    } catch (error) {\n      console.error(\"Error rewarding participants:\", error);\n    }\n  }\n} "]}