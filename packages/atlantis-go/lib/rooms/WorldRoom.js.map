{"version":3,"file":"WorldRoom.js","sourceRoot":"","sources":["../../src/rooms/WorldRoom.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @file rooms/WorldRoom.ts\n * @description Primary multiplayer room for Atlantis Go's world\n * \n * This room handles:\n * - Player movement and presence\n * - Power spawning and capturing\n * - Zone interactions\n * - Real-time state synchronization\n */\n\nimport { Room, Client, Delayed, ServerError } from '@colyseus/core';\nimport { MapSchema } from '@colyseus/schema';\nimport { SimplifiedWorldState, SimplePlayer, SimplePower, SimpleZone } from '../schemas/BaseSchema.js';\nimport { Player, Power, Zone } from '../schemas/GameEntities.js';\nimport { Position, UserMetadata, VirtuePoints } from '../schemas/index.js';\nimport { PowerCollection } from '../schemas/PowerSchema.js';\nimport PowerService from '../services/PowerService.js';\nimport ExperienceService from '../services/ExperienceService.js';\nimport { nanoid } from 'nanoid';\nimport { SimplePosition } from '../types.js';\nimport { Experience, ExperienceInstance } from '../schemas/ExperienceSchema.js';\n\n// Define RoomOptions type\ninterface RoomOptions {\n  name?: string;\n  description?: string;\n  maxPlayers?: number;\n  regionId?: string;\n}\n\n// Player metadata values interface\ninterface MetadataValues {\n  userId: string;\n  username: string;\n  rank?: number;\n  avatarUrl?: string;\n}\n\n// Type definitions for the capture challenge\ninterface CaptureChallenge {\n  type: string;\n  prompt: string;\n  minLength?: number;\n  options?: string[];\n  correctIndex?: number;\n}\n\n// Definitions for message types\ninterface MovementMessage {\n  x: number;\n  y: number;\n}\n\ninterface PowerInteractionMessage {\n  powerId: string;\n  type: string;\n  data?: any;\n}\n\ninterface ExperienceInteractionMessage {\n  experienceId: string;\n  type: string;\n  data?: any;\n}\n\ninterface PlayerStatusMessage {\n  state?: string;\n}\n\n// Configuration constants\nconst CONFIG = {\n  PLAYER_INACTIVE_TIMEOUT: 5 * 60 * 1000, // 5 minutes\n  POWER_SPAWN_INTERVAL: 60 * 1000, // 1 minute\n  MAX_POWERS_PER_AREA: 10,\n  VISIBILITY_RADIUS: 1000, // meters\n  INTERACTION_RADIUS: 5000, // meters - increased for testing (was 50)\n  POWER_MAX_COUNT: 50,\n  POWER_DENSITY: 0.001, // powers per square meter\n  POWER_LIFETIME: 3600000, // 1 hour in ms\n  WORLD_SIZE: {\n    WIDTH: 10000, // meters\n    HEIGHT: 10000, // meters\n  },\n  ZONE_MAX_COUNT: 30,\n  WORLD_UPDATE_INTERVAL: 1000, // 1 second in ms\n  MAX_PLAYERS: 100, // Maximum players in the room\n  RATE_LIMIT: {\n    MOVEMENT: {\n      WINDOW_MS: 1000, // 1 second\n      MAX_REQUESTS: 5 // 5 requests per second\n    },\n    ACTION: {\n      WINDOW_MS: 1000, // 1 second\n      MAX_REQUESTS: 3 // 3 requests per second\n    }\n  },\n  // Added more efficient configuration\n  BATCH_UPDATES: true,\n  BROADCAST_THROTTLE_MS: 100, // Throttle broadcasts\n  ENTITY_CULLING_DISTANCE: 2000, // Only send entities within this distance\n  OPTIMIZE_NETWORK: true, // Enable network optimizations\n  EXPERIENCE_SPAWN_INTERVAL: 5 * 60 * 1000, // 5 minutes\n  MAX_EXPERIENCES_PER_AREA: 5,\n  EXPERIENCE_MAX_COUNT: 30,\n  EXPERIENCE_DENSITY: 0.0002, // Experiences per square meter\n  EXPERIENCE_LIFETIME: 24 * 3600000, // 24 hours in ms\n};\n\n/**\n * WorldRoom: The primary multiplayer room that manages the game world\n */\nexport class WorldRoom extends Room<SimplifiedWorldState> {\n  private powerService: typeof PowerService;\n  private experienceService: any; // TODO: Replace with proper type once ExperienceService is created\n  private tickInterval!: Delayed;\n  private cleanupInterval!: Delayed;\n  private lastTickTime: number = Date.now();\n  private readonly TICK_RATE: number = 1000 / 20; // 20 ticks per second\n  private readonly CLEANUP_INTERVAL: number = 60000; // 1 minute\n\n  constructor() {\n    super();\n    this.powerService = PowerService;\n    this.experienceService = {}; // Mock service for now\n  }\n\n  // Track rate limits for clients\n  private movementRateLimits: Map<string, { count: number, lastReset: number }> = new Map();\n  private actionRateLimits: Map<string, { count: number, lastReset: number }> = new Map();\n  \n  // Scheduled tasks\n  private powerSpawnTask: NodeJS.Timeout | null = null;\n  private playerInactivityTask: NodeJS.Timeout | null = null;\n  private worldStateUpdateTask: NodeJS.Timeout | null = null;\n  \n  // Track players needing state updates\n  private playersPendingUpdate: Set<string> = new Set();\n  \n  // Last broadcast time\n  private lastBroadcastTime: number = 0;\n  \n  // Add these properties to the WorldRoom class\n  private experienceSpawnTask: NodeJS.Timeout | null = null;\n  private activeExperienceInstances: Map<string, Delayed> = new Map();\n  \n  /**\n   * Called when room is initialized\n   */\n  async onCreate(options: RoomOptions = {}) {\n    console.log(\"WorldRoom created with options:\", options);\n    \n    try {\n      // Initialize state\n      this.setState(new SimplifiedWorldState());\n      this.state.name = options.name || \"Main World\";\n      \n      // Set max clients\n      this.maxClients = CONFIG.MAX_PLAYERS;\n      \n      // Create initial zones - spread across creation\n      setTimeout(() => this.createInitialZones(), 100);\n      \n      // Spawn initial powers\n      this.spawnPowers();\n      \n      // Spawn initial experiences\n      this.spawnExperiences();\n      \n      // Register message handlers\n      this.registerMessageHandlers();\n      \n      // Start scheduled tasks\n      this.startScheduledTasks();\n      \n      // Set up periodic world updates\n      this.tickInterval = this.clock.setInterval(() => {\n        this.state.updateTick();\n        this.lastTickTime = Date.now();\n      }, this.TICK_RATE);\n\n      // Set up periodic cleanup\n      this.cleanupInterval = this.clock.setInterval(() => {\n        this.cleanup();\n      }, this.CLEANUP_INTERVAL);\n      \n      console.log(`WorldRoom initialized successfully`);\n    } catch (error) {\n      console.error(\"Error creating WorldRoom:\", error);\n    }\n  }\n  \n  /**\n   * Create initial test zones\n   */\n  private createInitialZones() {\n    // Create a central zone\n    const centerZone = new SimpleZone(\n      'zone_center',\n      'Atlantis Central',\n      'hub'\n    );\n    centerZone.x = 0;\n    centerZone.y = 0;\n    centerZone.radius = 200;\n    this.state.zones.set(centerZone.id, centerZone);\n    \n    // Create some additional zones\n    const northZone = new SimpleZone(\n      'zone_north',\n      'Northern District',\n      'residential'\n    );\n    northZone.x = 0;\n    northZone.y = 300;\n    northZone.radius = 150;\n    this.state.zones.set(northZone.id, northZone);\n    \n    const eastZone = new SimpleZone(\n      'zone_east',\n      'Eastern District',\n      'commercial'\n    );\n    eastZone.x = 300;\n    eastZone.y = 0;\n    eastZone.radius = 150;\n    this.state.zones.set(eastZone.id, eastZone);\n    \n    const southZone = new SimpleZone(\n      'zone_south',\n      'Southern District',\n      'industrial'\n    );\n    southZone.x = 0;\n    southZone.y = -300;\n    southZone.radius = 150;\n    this.state.zones.set(southZone.id, southZone);\n    \n    const westZone = new SimpleZone(\n      'zone_west',\n      'Western District',\n      'educational'\n    );\n    westZone.x = -300;\n    westZone.y = 0;\n    westZone.radius = 150;\n    this.state.zones.set(westZone.id, westZone);\n    \n    console.log(`Created ${this.state.zones.size} initial zones`);\n  }\n  \n  /**\n   * Register message handlers\n   * @private\n   */\n  private registerMessageHandlers() {\n    // Player movement\n    this.onMessage(\"move\", (client, message: MovementMessage) => {\n      this.handlePlayerMovement(client, message);\n    });\n    \n    // Power interactions\n    this.onMessage(\"power:interact\", (client, message: PowerInteractionMessage) => {\n      this.handlePowerInteraction(client, message);\n    });\n    \n    // Power capture attempt\n    this.onMessage(\"power:capture\", (client, message: PowerInteractionMessage) => {\n      this.handlePowerCapture(client, message);\n    });\n    \n    // Request power details\n    this.onMessage(\"power:details\", (client, message: any) => {\n      // Get the power\n      const power = this.state.powers.get(message.powerId);\n      if (!power) {\n        client.send(\"powerDetailsResult\", {\n          success: false,\n          message: \"Power not found\"\n        });\n        return;\n      }\n      \n      // Send power details\n      client.send(\"power:details\", {\n        power: {\n          id: power.id,\n          name: power.name,\n          type: power.type,\n          rarity: power.rarity,\n          position: {\n            x: power.x,\n            y: power.y\n          }\n        }\n      });\n    });\n    \n    // Ping handler for latency measurement\n    this.onMessage(\"ping\", (client, message: any) => {\n      // Simply echo back the time sent by the client\n      client.send(\"pong\", { time: message.time });\n    });\n    \n    // Handle zone entry requests\n    this.onMessage(\"zone:enter\", (client, message: any) => {\n      this.handleZoneEntry(client, message);\n    });\n    \n    // Handle zone exit requests\n    this.onMessage(\"zone:exit\", (client, message: any) => {\n      this.handleZoneExit(client, message);\n    });\n    \n    // Handle player status updates\n    this.onMessage(\"player:status\", (client, message: PlayerStatusMessage) => {\n      this.handlePlayerStatus(client, message);\n    });\n    \n    // Test spawning powers (development only)\n    if (process.env.NODE_ENV === 'development') {\n      this.onMessage(\"debug:spawnTestPowers\", (client, message: any) => {\n        this.handleSpawnTestPowers(client, message);\n      });\n    }\n    \n    // Experience handlers\n    this.onMessage(\"experienceJoin\", (client, message: ExperienceInteractionMessage) => {\n      this.checkRateLimit(client.sessionId, 'action') && \n        this.handleExperienceJoin(client, message);\n    });\n    \n    this.onMessage(\"experiencePhaseComplete\", (client, message: ExperienceInteractionMessage) => {\n      this.checkRateLimit(client.sessionId, 'action') && \n        this.handleExperiencePhaseComplete(client, message);\n    });\n    \n    this.onMessage(\"experienceLeave\", (client, message: ExperienceInteractionMessage) => {\n      this.checkRateLimit(client.sessionId, 'action') && \n        this.handleExperienceLeave(client, message);\n    });\n  }\n  \n  /**\n   * Start scheduled background tasks\n   */\n  private startScheduledTasks() {\n    // Spawn powers periodically\n    this.powerSpawnTask = setInterval(() => {\n      this.spawnPowers();\n    }, CONFIG.POWER_SPAWN_INTERVAL);\n    \n    // Check for inactive players\n    this.playerInactivityTask = setInterval(() => {\n      this.checkInactivePlayers();\n    }, CONFIG.PLAYER_INACTIVE_TIMEOUT / 10);\n    \n    // Update world state - efficient update using pending updates tracking\n    this.worldStateUpdateTask = setInterval(() => {\n      // Skip if no players or no pending updates\n      if (this.clients.length === 0 || this.playersPendingUpdate.size === 0) {\n        return;\n      }\n      \n      const now = Date.now();\n      // Only broadcast if enough time has passed since last broadcast\n      if (now - this.lastBroadcastTime >= CONFIG.BROADCAST_THROTTLE_MS) {\n        this.lastBroadcastTime = now;\n        \n        // Process pending updates\n        for (const clientId of this.playersPendingUpdate) {\n          const client = this.clients.find(c => c.sessionId === clientId);\n          if (client) {\n            this.sendVisibleWorldToClient(client);\n          }\n        }\n        \n        // Clear pending updates\n        this.playersPendingUpdate.clear();\n      }\n      \n      // Update state tick\n      this.state.tick();\n    }, CONFIG.WORLD_UPDATE_INTERVAL);\n    \n    // Spawn new experiences periodically\n    this.experienceSpawnTask = setInterval(() => {\n      try {\n        this.spawnExperiences();\n      } catch (error) {\n        console.error(\"Error in experience spawn task:\", error);\n      }\n    }, CONFIG.EXPERIENCE_SPAWN_INTERVAL);\n  }\n  \n  /**\n   * Main simulation update loop\n   */\n  update(deltaTime: number) {\n    // Check for powers that should despawn based on age\n    const currentTime = Date.now();\n    const maxAge = CONFIG.POWER_LIFETIME;\n    \n    this.state.powers.forEach((power, key) => {\n      // Check if power has been active for too long\n      if (currentTime - power.spawnedAt > maxAge) {\n        this.state.powers.delete(key);\n      }\n    });\n    \n    // Update world time and tick\n    this.state.worldTime = Date.now();\n    this.state.updateTick();\n  }\n  \n  /**\n   * When a client joins the room\n   */\n  onJoin(client: Client, options: MetadataValues & { position?: { x: number, y: number } }) {\n    console.log(`${client.sessionId} joined the world!`, options);\n    \n    // Create player instance\n    const userId = options.userId || `user_${nanoid(8)}`;\n    const username = options.username || `Player ${Math.floor(Math.random() * 1000)}`;\n    \n    // Create a simplified player\n    const player = new SimplePlayer(userId, username);\n    \n    // Set initial position\n    if (options.position) {\n      player.x = options.position.x;\n      player.y = options.position.y;\n    } else {\n      // Random position if none provided\n      player.x = (Math.random() * 100) - 50;  // -50 to +50\n      player.y = (Math.random() * 100) - 50;\n    }\n    \n    // Initialize empty metadata\n    player.metadata = new MapSchema<string>();\n    \n    // Add player to state\n    this.state.players.set(client.sessionId, player);\n    \n    // Initialize rate limiters for this client\n    this.movementRateLimits.set(client.sessionId, {\n      count: 0,\n      lastReset: Date.now()\n    });\n    \n    this.actionRateLimits.set(client.sessionId, {\n      count: 0,\n      lastReset: Date.now()\n    });\n    \n    console.log(`Player ${client.sessionId} joined with position: (${player.x}, ${player.y})`);\n    \n    // Send initial state to client\n    this.sendVisibleWorldToClient(client);\n  }\n  \n  /**\n   * Send only the visible portion of the world to the client\n   * based on their location and visibility radius\n   */\n  private sendVisibleWorldToClient(client: Client) {\n    try {\n      // Get player from state\n      const player = this.state.players.get(client.sessionId);\n      if (!player) {\n        console.warn(`sendVisibleWorldToClient: Player not found for client ${client.sessionId}`);\n        return;\n      }\n      \n      // Create a player position reference for visibility checks\n      const playerPos = { x: player.x, y: player.y };\n      \n      // Count of entities by type within visibility radius\n      const counts = {\n        players: 0,\n        powers: 0,\n        zones: 0\n      };\n      \n      // Find visible players\n      const visiblePlayers: any[] = [];\n      this.state.players.forEach((otherPlayer, sessionId) => {\n        // Skip self\n        if (sessionId === client.sessionId) return;\n        \n        // Calculate distance\n        const distance = this.calculateDistance(\n          playerPos,\n          { x: otherPlayer.x, y: otherPlayer.y }\n        );\n        \n        // Check if within visibility radius\n        if (distance <= CONFIG.ENTITY_CULLING_DISTANCE) {\n          visiblePlayers.push({\n            id: sessionId,\n            username: otherPlayer.username,\n            x: otherPlayer.x,\n            y: otherPlayer.y,\n            state: otherPlayer.state\n          });\n          counts.players++;\n        }\n      });\n      \n      // Find visible powers\n      const visiblePowers: any[] = [];\n      this.state.powers.forEach((power, powerId) => {\n        // Calculate distance\n        const distance = this.calculateDistance(\n          playerPos,\n          { x: power.x, y: power.y }\n        );\n        \n        // Check if within visibility radius\n        if (distance <= CONFIG.ENTITY_CULLING_DISTANCE) {\n          visiblePowers.push({\n            id: powerId,\n            name: power.name,\n            type: power.type,\n            rarity: power.rarity,\n            x: power.x,\n            y: power.y\n          });\n          counts.powers++;\n        }\n      });\n      \n      // Find visible zones\n      const visibleZones: any[] = [];\n      this.state.zones.forEach((zone, zoneId) => {\n        // Calculate distance\n        const distance = this.calculateDistance(\n          playerPos,\n          { x: zone.x, y: zone.y }\n        );\n        \n        // Check if within visibility radius\n        if (distance <= CONFIG.ENTITY_CULLING_DISTANCE) {\n          visibleZones.push({\n            id: zoneId,\n            name: zone.name,\n            type: zone.type,\n            x: zone.x,\n            y: zone.y,\n            radius: zone.radius\n          });\n          counts.zones++;\n        }\n      });\n      \n      // Send visible world state to client\n      client.send('world:visible', {\n        players: counts.players,\n        powers: counts.powers,\n        zones: counts.zones,\n        visiblePlayers,\n        visiblePowers,\n        visibleZones,\n        visibilityRadius: CONFIG.VISIBILITY_RADIUS\n      });\n      \n    } catch (error) {\n      console.error('Error in sendVisibleWorldToClient:', error);\n    }\n  }\n  \n  /**\n   * Calculate distance between two points\n   */\n  private calculateDistance(point1: SimplePosition, point2: SimplePosition): number {\n    return Math.sqrt(\n      Math.pow(point1.x - point2.x, 2) + \n      Math.pow(point1.y - point2.y, 2)\n    );\n  }\n  \n  /**\n   * Handle player movement with improved efficiency\n   */\n  private handlePlayerMovement(client: Client, message: MovementMessage & { state?: string }) {\n    // Rate limit check\n    if (!this.checkRateLimit(client.sessionId, 'movement')) {\n      return;\n    }\n    \n    try {\n      // Validate message format\n      if (!message || typeof message.x !== 'number' || typeof message.y !== 'number') {\n        console.warn(`Invalid movement message from client ${client.sessionId}`);\n        return;\n      }\n      \n      // Set the state based on message if provided\n      const state = message.state || \"moving\";\n      \n      // Get player\n      const player = this.state.players.get(client.sessionId);\n      if (!player) {\n        console.warn(`Player not found for client ${client.sessionId}`);\n        return;\n      }\n      \n      // Update position\n      player.x = message.x;\n      player.y = message.y;\n      \n      // Update state and last activity\n      player.setState(state);\n      \n      // Mark player as needing a world update\n      this.playersPendingUpdate.add(client.sessionId);\n      \n      // Check if player is inside any zone\n      this.checkZoneEntry(client, player);\n      \n    } catch (error) {\n      console.error('Error in handlePlayerMovement:', error);\n    }\n  }\n  \n  /**\n   * When a client leaves the room\n   */\n  async onLeave(client: Client, consented: boolean) {\n    const player = this.state.players.get(client.sessionId);\n    \n    try {\n      if (!consented) {\n        // Unexpected disconnect - wait for reconnection\n        console.log(`${client.sessionId} disconnected. Waiting for reconnection...`);\n        await this.allowReconnection(client, 30);\n        console.log(`${client.sessionId} reconnected!`);\n        \n        // Reset activity timestamp\n        if (player) {\n          player.lastActivity = Date.now();\n          player.isActive = true;\n        }\n        \n        return;\n      }\n    } catch (e) {\n      // Reconnection failed or timeout expired\n      console.log(`${client.sessionId} couldn't reconnect, removing from world`);\n    }\n    \n    // Remove player from world\n    if (player) {\n      // Remove from current zone if any\n      if (player.currentZoneId) {\n        const zone = this.state.zones.get(player.currentZoneId);\n        if (zone) {\n          zone.removePlayer(player.id);\n        }\n      }\n      \n      // Remove player from state\n      this.state.players.delete(client.sessionId);\n    }\n    \n    // Clean up rate limiters\n    this.movementRateLimits.delete(client.sessionId);\n    this.actionRateLimits.delete(client.sessionId);\n    \n    console.log(`${client.sessionId} left the world`);\n  }\n  \n  /**\n   * When room is disposed\n   */\n  onDispose() {\n    console.log(`World Room ${this.roomId} is being disposed`);\n    \n    // Clear all scheduled tasks\n    if (this.powerSpawnTask) clearInterval(this.powerSpawnTask);\n    if (this.playerInactivityTask) clearInterval(this.playerInactivityTask);\n    if (this.worldStateUpdateTask) clearInterval(this.worldStateUpdateTask);\n    \n    // Clear experience spawn task\n    if (this.experienceSpawnTask) {\n      clearInterval(this.experienceSpawnTask);\n      this.experienceSpawnTask = null;\n    }\n    \n    // Clear active experience timeouts\n    this.activeExperienceInstances.forEach(timeout => {\n      timeout.clear();\n    });\n    this.activeExperienceInstances.clear();\n    \n    console.log('All tasks cleared');\n  }\n  \n  /**\n   * Check and enforce rate limits for client actions\n   * @param sessionId - Client session ID\n   * @param type - Type of action (movement, action)\n   * @returns Whether the action is allowed\n   */\n  private checkRateLimit(sessionId: string, type: 'movement' | 'action'): boolean {\n    const now = Date.now();\n    const limitMap = type === 'movement' ? this.movementRateLimits : this.actionRateLimits;\n    const limits = CONFIG.RATE_LIMIT[type.toUpperCase() as keyof typeof CONFIG.RATE_LIMIT];\n    \n    if (!limitMap.has(sessionId)) return false;\n    \n    const clientLimit = limitMap.get(sessionId)!;\n    \n    // Reset counter if window expired\n    if (now - clientLimit.lastReset > limits.WINDOW_MS) {\n      clientLimit.count = 0;\n      clientLimit.lastReset = now;\n    }\n    \n    // Check if limit exceeded\n    if (clientLimit.count >= limits.MAX_REQUESTS) {\n      return false;\n    }\n    \n    // Increment counter\n    clientLimit.count++;\n    return true;\n  }\n  \n  /**\n   * Check for and mark inactive players\n   */\n  private checkInactivePlayers() {\n    const now = Date.now();\n    const inactiveTimeout = CONFIG.PLAYER_INACTIVE_TIMEOUT;\n    \n    this.state.players.forEach((player, sessionId) => {\n      if (now - player.lastActivity > inactiveTimeout) {\n        player.markInactive();\n      }\n    });\n  }\n  \n  /**\n   * Handle a power interaction request\n   * @param client Client initiating the power interaction\n   * @param message Power interaction message\n   */\n  private handlePowerInteraction(client: Client, message: PowerInteractionMessage) {\n    try {\n      // Verbose logging for debugging\n      console.log(`[handlePowerInteraction] Client ${client.sessionId} is interacting with power:`, JSON.stringify(message));\n      \n      // Validate message structure\n      if (!message || typeof message !== 'object') {\n        console.log(`[handlePowerInteraction] Invalid message format from client ${client.sessionId}`);\n        client.send('power:error', { \n          message: 'Invalid message format',\n          status: 'error',\n          code: 'INVALID_FORMAT'\n        });\n        return;\n      }\n      \n      // Rate limiting\n      if (!this.checkRateLimit(client.sessionId, 'action')) {\n        console.log(`[handlePowerInteraction] Rate limit exceeded for client ${client.sessionId}`);\n        client.send('power:error', { \n          message: 'Action rate limit exceeded. Please try again in a few seconds.',\n          status: 'error',\n          code: 'RATE_LIMIT'\n        });\n        return;\n      }\n      \n      // Get player from state\n      const player = this.state.players.get(client.sessionId);\n      if (!player) {\n        console.log(`[handlePowerInteraction] Player not found for client ${client.sessionId}`);\n        client.send('power:error', { \n          message: 'Player not found in game state. Please try reconnecting.',\n          status: 'error',\n          code: 'PLAYER_NOT_FOUND'\n        });\n        return;\n      }\n      \n      // Validate message\n      if (!message.powerId) {\n        console.log(`[handlePowerInteraction] Missing powerId in message from client ${client.sessionId}`);\n        client.send('power:error', { \n          message: 'Missing power ID in request',\n          status: 'error',\n          code: 'MISSING_POWER_ID'\n        });\n        return;\n      }\n      \n      console.log(`[handlePowerInteraction] Looking for power ${message.powerId} in state.powers (size: ${this.state.powers.size})`);\n      \n      // Log all available power IDs for debugging\n      const availablePowerIds = Array.from(this.state.powers.keys());\n      console.log(`[handlePowerInteraction] Available power IDs: ${JSON.stringify(availablePowerIds)}`);\n      \n      // Try to find the power in the state\n      const power = this.state.powers.get(message.powerId);\n      if (!power) {\n        console.log(`[handlePowerInteraction] Power ${message.powerId} not found`);\n        client.send('power:notFound', { \n          powerId: message.powerId,\n          availablePowers: availablePowerIds.length,\n          playerPosition: { x: player.x, y: player.y },\n          message: 'Power not found in game state',\n          status: 'error',\n          code: 'POWER_NOT_FOUND'\n        });\n        return;\n      }\n      \n      // Check if power is active\n      if (!power.isActive) {\n        console.log(`[handlePowerInteraction] Power ${message.powerId} is not active`);\n        client.send('power:notActive', { \n          powerId: message.powerId,\n          message: 'This power has already been captured',\n          status: 'error',\n          code: 'POWER_NOT_ACTIVE'\n        });\n        return;\n      }\n      \n      console.log(`[handlePowerInteraction] Found power: ${power.id} (${power.name})`);\n      \n      // Check if player is close enough to interact\n      const distance = Math.sqrt(Math.pow(player.x - power.x, 2) + Math.pow(player.y - power.y, 2));\n      console.log(`[handlePowerInteraction] Distance to power: ${distance}m (max: ${CONFIG.INTERACTION_RADIUS}m)`);\n      console.log(`[handlePowerInteraction] Player position: (${player.x}, ${player.y}), Power position: (${power.x}, ${power.y})`);\n      \n      if (distance > CONFIG.INTERACTION_RADIUS) {\n        console.log(`[handlePowerInteraction] Player too far from power: ${distance}m > ${CONFIG.INTERACTION_RADIUS}m`);\n        client.send('power:tooFar', { \n          powerId: power.id,\n          distance,\n          maxDistance: CONFIG.INTERACTION_RADIUS,\n          playerPosition: { x: player.x, y: player.y },\n          powerPosition: { x: power.x, y: power.y },\n          message: 'You are too far away from this power',\n          status: 'error',\n          code: 'TOO_FAR'\n        });\n        return;\n      }\n      \n      // Send power details to client\n      console.log(`[handlePowerInteraction] Sending power details to client ${client.sessionId}`);\n      try {\n        const details = {\n          id: power.id,\n          name: power.name || \"Unknown Power\",\n          description: power.description || \"No description available\",\n          type: power.type || \"Unknown\",\n          rarity: power.rarity || \"Common\",\n          matrixQuadrant: power.matrixQuadrant || \"Unknown\",\n          captureChallenge: power.captureChallenge || {\n            type: \"reflection\",\n            question: \"What virtue does this power represent to you?\"\n          },\n          status: 'success',\n          message: 'Power details retrieved successfully',\n          distance: Math.round(distance * 10) / 10, // Round to 1 decimal place\n          playerPosition: { x: player.x, y: player.y },\n          powerPosition: { x: power.x, y: power.y }\n        };\n        \n        console.log(`[handlePowerInteraction] Power details to send:`, JSON.stringify(details));\n        client.send('power:details', details);\n        \n        // Update player last activity and state\n        player.lastActivity = Date.now();\n        player.setState('interacting');\n      } catch (detailsError: any) {\n        console.error(`[handlePowerInteraction] Error sending power details:`, detailsError);\n        client.send('power:error', { \n          message: 'Error processing power details',\n          error: detailsError.message || 'Unknown error',\n          status: 'error',\n          code: 'DETAILS_ERROR'\n        });\n      }\n    } catch (error) {\n      console.error(`[handlePowerInteraction] Unexpected error:`, error);\n      try {\n        client.send('power:error', { \n          message: 'Server error processing power interaction',\n          error: error.message,\n          status: 'error',\n          code: 'SERVER_ERROR'\n        });\n      } catch (sendError) {\n        console.error(`[handlePowerInteraction] Failed to send error to client:`, sendError);\n      }\n    }\n  }\n  \n  /**\n   * Handle the admin request to spawn test powers\n   * @param client - Client requesting power spawn\n   * @param message - Spawn message with options\n   */\n  private handleSpawnTestPowers(client: Client, message: any) {\n    console.log(`[handleSpawnTestPowers] Received request:`, message);\n    \n    // Get player\n    const player = this.state.players.get(client.sessionId);\n    if (!player) {\n      console.log(`[handleSpawnTestPowers] Player not found for client ${client.sessionId}`);\n      return;\n    }\n    \n    // Log the request\n    console.log(`[handleSpawnTestPowers] Admin request from ${player.username} (${client.sessionId})`);\n    \n    // Default count\n    const count = message.count || 3;\n    console.log(`[handleSpawnTestPowers] Spawning ${count} powers`);\n    \n    // Generate powers near the player if specified\n    let centerPosition = new Position();\n    if (message.nearPlayer) {\n      centerPosition.x = player.x;\n      centerPosition.y = player.y;\n      console.log(`[handleSpawnTestPowers] Using player position: (${centerPosition.x}, ${centerPosition.y})`);\n    } else {\n      centerPosition.x = 0;\n      centerPosition.y = 0;\n      console.log(`[handleSpawnTestPowers] Using default position: (0, 0)`);\n    }\n    \n    // Generate powers\n    const radius = message.radius || 100; // 100 meter radius\n    console.log(`[handleSpawnTestPowers] Requesting ${count} powers within ${radius}m radius`);\n    \n    const powers = PowerService.generatePowersForArea(centerPosition, radius, count);\n    console.log(`[handleSpawnTestPowers] Generated ${powers.length} powers`);\n    \n    // Add powers to game world\n    for (const powerData of powers) {\n      // Create a simplified power that works with our schema\n      const power = new SimplePower(\n        powerData._id,\n        powerData.name,\n        powerData.type,\n        powerData.rarity\n      );\n      \n      // Position the power - randomly place within radius of requested position\n      const angle = Math.random() * Math.PI * 2;\n      const distance = Math.random() * radius * 0.8; // 80% of radius for better clustering\n      power.x = centerPosition.x + Math.cos(angle) * distance;\n      power.y = centerPosition.y + Math.sin(angle) * distance;\n      \n      // Make sure the power is active\n      power.isActive = true;\n      power.spawnedAt = Date.now();\n      \n      // Add to state\n      this.state.powers.set(power.id, power);\n      console.log(`[handleSpawnTestPowers] Spawned power: ${power.name} (${power.id}) at (${power.x}, ${power.y})`);\n    }\n    \n    // Update total count\n    console.log(`[handleSpawnTestPowers] Total powers in world: ${this.state.powers.size}`);\n    \n    // Notify the client\n    client.send(\"admin:powersSpawned\", {\n      count: powers.length,\n      position: {\n        x: centerPosition.x,\n        y: centerPosition.y\n      },\n      radius: radius\n    });\n  }\n  \n  /**\n   * Check if a player has entered or exited a zone\n   * @param client Client to notify\n   * @param player Player to check\n   */\n  private checkZoneEntry(client: Client, player: SimplePlayer) {\n    // Find zone at current position\n    let currentZone: SimpleZone | null = null;\n    \n    this.state.zones.forEach((zone: SimpleZone) => {\n      const distance = Math.sqrt(\n        Math.pow(zone.x - player.x, 2) + \n        Math.pow(zone.y - player.y, 2)\n      );\n      \n      // Check if player is inside zone\n      if (distance <= zone.radius) {\n        // If multiple zones overlap, prioritize the smaller one\n        if (!currentZone || zone.radius < currentZone.radius) {\n          currentZone = zone;\n        }\n      }\n    });\n    \n    // Process zone changes\n    const previousZoneId = player.currentZoneId;\n    \n    if (currentZone) {\n      // Player entered a zone\n      const zoneId = currentZone.id;\n      \n      // Update player's current zone\n      player.setZone(zoneId);\n      \n      // Only notify if the zone changed\n      if (previousZoneId !== zoneId) {\n        client.send('zone:entered', {\n          zoneId: zoneId,\n          zoneName: currentZone.name,\n          zoneType: currentZone.type\n        });\n      }\n    } else if (previousZoneId) {\n      // Player exited a zone\n      const previousZone = this.state.zones.get(previousZoneId);\n      \n      // Clear player's current zone\n      player.setZone(\"\");\n      \n      if (previousZone) {\n        client.send('zone:exited', {\n          zoneId: previousZoneId,\n          zoneName: previousZone.name\n        });\n      }\n    }\n  }\n  \n  /**\n   * Spawn experiences throughout the world\n   */\n  private spawnExperiences() {\n    // Check if we've reached the maximum number of experiences\n    const experienceCount = this.state.experiences.size;\n    if (experienceCount >= CONFIG.EXPERIENCE_MAX_COUNT) {\n      return;\n    }\n    \n    // Calculate how many experiences to spawn\n    const targetCount = Math.floor(\n      CONFIG.WORLD_SIZE.WIDTH * CONFIG.WORLD_SIZE.HEIGHT * CONFIG.EXPERIENCE_DENSITY\n    );\n    \n    // Don't spawn more than the max\n    const spawnCount = Math.min(\n      targetCount - experienceCount,\n      CONFIG.MAX_EXPERIENCES_PER_AREA\n    );\n    \n    if (spawnCount <= 0) {\n      return;\n    }\n    \n    console.log(`Spawning ${spawnCount} new experiences`);\n    \n    // Create a center position in the world\n    const centerPosition = new Position();\n    centerPosition.x = CONFIG.WORLD_SIZE.WIDTH / 2;\n    centerPosition.y = CONFIG.WORLD_SIZE.HEIGHT / 2;\n    \n    // Generate experiences\n    const experiences = ExperienceService.generateExperiencesForArea(\n      centerPosition,\n      Math.min(CONFIG.WORLD_SIZE.WIDTH, CONFIG.WORLD_SIZE.HEIGHT) / 2,\n      spawnCount\n    );\n    \n    // Add experiences to the state\n    experiences.forEach(experience => {\n      this.state.experiences.set(experience.id, experience);\n      \n      // Schedule despawn if needed\n      this.clock.setTimeout(() => {\n        if (this.state.experiences.has(experience.id)) {\n          this.state.experiences.delete(experience.id);\n          console.log(`Experience ${experience.id} despawned due to timeout`);\n        }\n      }, CONFIG.EXPERIENCE_LIFETIME);\n    });\n  }\n  \n  /**\n   * Handle a request to join an experience\n   */\n  private handleExperienceJoin(client: Client, message: ExperienceInteractionMessage) {\n    try {\n      // Get player and experience\n      const player = this.state.players.get(client.sessionId);\n      if (!player) {\n        throw new Error(\"Player not found\");\n      }\n      \n      const experience = this.state.experiences.get(message.experienceId);\n      if (!experience) {\n        throw new Error(\"Experience not found\");\n      }\n      \n      // Check if player meets requirements\n      const playerPowers = Array.from(player.powers.keys()) as string[];\n      const qualification = ExperienceService.checkExperienceQualification(\n        experience,\n        player.rank,\n        playerPowers\n      );\n      \n      if (!qualification.qualified) {\n        client.send(\"experienceError\", {\n          experienceId: experience.id,\n          error: qualification.reason || \"You don't meet the requirements for this experience\"\n        });\n        return;\n      }\n      \n      // Check if there's already an instance for this experience in the same zone\n      let instance: ExperienceInstance | undefined;\n      const playerZoneId = player.currentZoneId;\n      \n      // Look for existing instances with open slots\n      this.state.experienceInstances.forEach(existingInstance => {\n        if (\n          existingInstance.experienceId === experience.id &&\n          existingInstance.status === \"Scheduled\" &&\n          (existingInstance.zoneId === playerZoneId || !existingInstance.zoneId) &&\n          existingInstance.participants.size < experience.maxPlayers\n        ) {\n          instance = existingInstance;\n        }\n      });\n      \n      // Create new instance if needed\n      if (!instance) {\n        instance = ExperienceService.createExperienceInstance(experience.id, playerZoneId);\n        this.state.experienceInstances.set(instance.id, instance);\n        console.log(`Created new experience instance ${instance.id} for experience ${experience.id}`);\n      }\n      \n      // Add player to instance\n      const participant = instance.addParticipant(player.id);\n      \n      // If we've reached minimum players, schedule the start\n      if (\n        instance.participants.size >= experience.minPlayers &&\n        instance.status === \"Scheduled\"\n      ) {\n        // Start after a short delay\n        this.clock.setTimeout(() => {\n          if (\n            this.state.experienceInstances.has(instance!.id) &&\n            instance!.status === \"Scheduled\"\n          ) {\n            instance!.start();\n            \n            // Set estimated completion time\n            instance!.estimatedCompletionTime = Date.now() + (experience.estimatedDuration * 60 * 1000);\n            \n            // Notify all participants\n            instance!.participants.forEach((participant, userId) => {\n              const participantClient = this.clients.find(c => \n                this.state.players.get(c.sessionId)?.id === userId\n              );\n              \n              if (participantClient) {\n                participantClient.send(\"experienceStarted\", {\n                  instanceId: instance!.id,\n                  experienceId: experience.id,\n                  startTime: instance!.startTime\n                });\n              }\n            });\n            \n            // Schedule automatic completion/failure check\n            const maxDuration = experience.maximumDuration * 60 * 1000; // Convert to ms\n            const timeoutTask = this.clock.setTimeout(() => {\n              // Check if instance still exists and is in progress\n              if (\n                this.state.experienceInstances.has(instance!.id) &&\n                instance!.status === \"InProgress\"\n              ) {\n                // Time's up - mark as failed\n                instance!.fail();\n                \n                // Notify all participants\n                instance!.participants.forEach((participant, userId) => {\n                  const participantClient = this.clients.find(c => \n                    this.state.players.get(c.sessionId)?.id === userId\n                  );\n                  \n                  if (participantClient) {\n                    participantClient.send(\"experienceEnded\", {\n                      instanceId: instance!.id,\n                      experienceId: experience.id,\n                      status: \"Failed\",\n                      reason: \"Time expired\"\n                    });\n                  }\n                });\n                \n                // Schedule cleanup\n                this.clock.setTimeout(() => {\n                  if (this.state.experienceInstances.has(instance!.id)) {\n                    this.state.experienceInstances.delete(instance!.id);\n                  }\n                }, 60000); // Clean up after 1 minute\n              }\n              \n              this.activeExperienceInstances.delete(instance!.id);\n            }, maxDuration);\n            \n            // Store the timeout task\n            this.activeExperienceInstances.set(instance!.id, timeoutTask);\n          }\n        }, 5000); // Start after 5 seconds\n      }\n      \n      // Notify player they've joined\n      client.send(\"experienceJoined\", {\n        instanceId: instance.id,\n        experienceId: experience.id,\n        status: instance.status,\n        currentPhase: instance.currentPhase,\n        participantCount: instance.participants.size\n      });\n      \n    } catch (error) {\n      console.error(\"Error handling experience join:\", error);\n      client.send(\"experienceError\", {\n        experienceId: message.experienceId,\n        error: error.message || \"Failed to join experience\"\n      });\n    }\n  }\n  \n  /**\n   * Handle experience phase completion\n   */\n  private handleExperiencePhaseComplete(client: Client, message: ExperienceInteractionMessage) {\n    try {\n      // Get player\n      const player = this.state.players.get(client.sessionId);\n      if (!player) {\n        throw new Error(\"Player not found\");\n      }\n      \n      // Find the instance the player is in\n      let instance: ExperienceInstance | undefined;\n      this.state.experienceInstances.forEach(exp => {\n        if (exp.participants.has(player.id)) {\n          instance = exp;\n        }\n      });\n      \n      if (!instance) {\n        throw new Error(\"You are not in an active experience\");\n      }\n      \n      // Get the experience template\n      const experience = this.state.experiences.get(instance.experienceId);\n      if (!experience) {\n        throw new Error(\"Experience template not found\");\n      }\n      \n      // Check if this is the current phase\n      if (message.phaseIndex !== undefined && message.phaseIndex !== instance.currentPhase) {\n        throw new Error(\"Invalid phase index\");\n      }\n      \n      // Check if we're in the right status\n      if (instance.status !== \"InProgress\") {\n        throw new Error(`Experience is not in progress (status: ${instance.status})`);\n      }\n      \n      // If there's a submission, add it\n      if (message.submission) {\n        instance.addActivity(player.id, JSON.stringify(message.submission));\n      }\n      \n      // Check if this is the last phase\n      if (instance.currentPhase >= experience.phases.length - 1) {\n        // This was the last phase, complete the experience\n        instance.complete();\n        \n        // Award rewards to all participants\n        instance.participants.forEach((participant, userId) => {\n          const participantPlayer = this.findPlayerById(userId);\n          if (participantPlayer) {\n            // XP and coins\n            participantPlayer.xp += experience.xpReward;\n            participantPlayer.coins += experience.coinsReward;\n            \n            // Check rank up\n            participantPlayer.checkRankUp();\n            \n            // Add virtue rewards (would update player.virtues in a full implementation)\n            \n            // Notify player\n            const participantClient = this.clients.find(c => \n              this.state.players.get(c.sessionId)?.id === userId\n            );\n            \n            if (participantClient) {\n              participantClient.send(\"experienceEnded\", {\n                instanceId: instance!.id,\n                experienceId: experience.id,\n                status: \"Completed\",\n                rewards: {\n                  xp: experience.xpReward,\n                  coins: experience.coinsReward,\n                  virtues: {\n                    wisdom: experience.wisdomReward,\n                    courage: experience.courageReward,\n                    temperance: experience.temperanceReward,\n                    justice: experience.justiceReward,\n                    strength: experience.strengthReward\n                  }\n                }\n              });\n            }\n          }\n        });\n        \n        // Clear any scheduled timeouts\n        if (this.activeExperienceInstances.has(instance.id)) {\n          this.activeExperienceInstances.get(instance.id)!.clear();\n          this.activeExperienceInstances.delete(instance.id);\n        }\n        \n        // Schedule cleanup\n        this.clock.setTimeout(() => {\n          if (this.state.experienceInstances.has(instance!.id)) {\n            this.state.experienceInstances.delete(instance!.id);\n          }\n        }, 60000); // Clean up after 1 minute\n      } else {\n        // Move to next phase\n        instance.advancePhase();\n        \n        // Notify all participants\n        instance.participants.forEach((participant, userId) => {\n          const participantClient = this.clients.find(c => \n            this.state.players.get(c.sessionId)?.id === userId\n          );\n          \n          if (participantClient) {\n            participantClient.send(\"experiencePhaseChanged\", {\n              instanceId: instance!.id,\n              experienceId: experience.id,\n              currentPhase: instance.currentPhase,\n              phaseName: experience.phases[instance.currentPhase]?.name || \"Unknown\"\n            });\n          }\n        });\n      }\n      \n    } catch (error) {\n      console.error(\"Error handling experience phase completion:\", error);\n      client.send(\"experienceError\", {\n        error: error.message || \"Failed to complete experience phase\"\n      });\n    }\n  }\n  \n  /**\n   * Handle leaving an experience\n   */\n  private handleExperienceLeave(client: Client, message: ExperienceInteractionMessage) {\n    try {\n      // Get player\n      const player = this.state.players.get(client.sessionId);\n      if (!player) {\n        throw new Error(\"Player not found\");\n      }\n      \n      // Find the instance the player is in\n      let instanceId: string | undefined;\n      this.state.experienceInstances.forEach((instance, id) => {\n        if (instance.participants.has(player.id)) {\n          instanceId = id;\n        }\n      });\n      \n      if (!instanceId) {\n        throw new Error(\"You are not in an active experience\");\n      }\n      \n      const instance = this.state.experienceInstances.get(instanceId);\n      if (!instance) {\n        throw new Error(\"Experience instance not found\");\n      }\n      \n      // Remove player from instance\n      instance.removeParticipant(player.id);\n      \n      // If no participants left, clean up the instance\n      if (instance.participants.size === 0) {\n        if (this.activeExperienceInstances.has(instanceId)) {\n          this.activeExperienceInstances.get(instanceId)!.clear();\n          this.activeExperienceInstances.delete(instanceId);\n        }\n        \n        this.state.experienceInstances.delete(instanceId);\n      } else if (instance.status === \"InProgress\") {\n        // If experience was in progress, notify remaining participants\n        instance.participants.forEach((participant, userId) => {\n          const participantClient = this.clients.find(c => \n            this.state.players.get(c.sessionId)?.id === userId\n          );\n          \n          if (participantClient) {\n            participantClient.send(\"experienceParticipantLeft\", {\n              instanceId: instance.id,\n              userId: player.id,\n              username: player.metadata.username\n            });\n          }\n        });\n      }\n      \n      // Notify the player they've left\n      client.send(\"experienceLeft\", {\n        instanceId: instance.id,\n        experienceId: instance.experienceId\n      });\n      \n    } catch (error) {\n      console.error(\"Error handling experience leave:\", error);\n      client.send(\"experienceError\", {\n        error: error.message || \"Failed to leave experience\"\n      });\n    }\n  }\n  \n  /**\n   * Find a player by ID (not session ID)\n   */\n  private findPlayerById(playerId: string): Player | undefined {\n    let result: Player | undefined;\n    \n    this.state.players.forEach(player => {\n      if (player.id === playerId) {\n        result = player;\n      }\n    });\n    \n    return result;\n  }\n\n  cleanup() {\n    const now = Date.now();\n    \n    // Cleanup inactive players\n    this.state.players.forEach((player, sessionId) => {\n      if (!player.isActive && now - player.lastUpdateTime > 3600000) {\n        this.state.players.delete(sessionId);\n      }\n    });\n\n    // Cleanup expired powers\n    this.state.powers.forEach((power, powerId) => {\n      if (PowerService.shouldDespawn(power)) {\n        this.state.powers.delete(powerId);\n      }\n    });\n  }\n\n  spawnPowers() {\n    // Generate powers using PowerService\n    const center = new Position(0, 0);\n    const powers = this.powerService.generatePowersForArea(center, 1000, 10);\n    \n    powers.forEach(power => {\n      const id = nanoid();\n      const simplePower = new SimplePower(\n        id,\n        power.name || 'Unknown Power',\n        power.type || 'Unknown',\n        power.rarity || 'Common'\n      );\n      if (power.position) {\n        simplePower.x = power.position.x;\n        simplePower.y = power.position.y;\n      }\n      this.state.powers.set(id, simplePower);\n    });\n  }\n\n  handlePowerCapture(client: Client, message: PowerInteractionMessage) {\n    const player = this.state.players.get(client.sessionId);\n    const power = this.state.powers.get(message.powerId);\n\n    if (!player || !power) {\n      return;\n    }\n\n    // Add power to player's collection\n    player.powers.set(power.id, power.id);\n    power.isActive = false;\n\n    // Remove power after delay\n    this.clock.setTimeout(() => {\n      this.state.powers.delete(power.id);\n    }, 5000);\n  }\n\n  handleZoneEntry(client: Client, message: any) {\n    const player = this.state.players.get(client.sessionId);\n    const zone = this.state.zones.get(message.zoneId);\n\n    if (!player || !zone) {\n      return;\n    }\n\n    zone.addPlayer(player.id);\n    player.setZone(zone.id);\n  }\n\n  handleZoneExit(client: Client, message: any) {\n    const player = this.state.players.get(client.sessionId);\n    if (!player || !player.currentZoneId) {\n      return;\n    }\n\n    const zone = this.state.zones.get(player.currentZoneId);\n    if (zone) {\n      zone.removePlayer(player.id);\n      player.setZone(\"\");\n    }\n  }\n\n  handlePlayerStatus(client: Client, message: PlayerStatusMessage) {\n    const player = this.state.players.get(client.sessionId);\n    if (!player) {\n      return;\n    }\n\n    if (message.state) {\n      player.setState(message.state);\n    }\n\n    player.lastUpdateTime = Date.now();\n    player.isActive = true;\n  }\n\n  private handleError(client: Client, error: Error | unknown, code: string) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    client.send('error', {\n      message: errorMessage,\n      code: code\n    });\n  }\n\n  // Temporarily disable experience-related functionality until proper types are implemented\n  private async handleExperienceInteraction(client: Client, message: any) {\n    client.send('experienceError', {\n      message: 'Experience functionality is temporarily disabled',\n      code: 'NOT_IMPLEMENTED'\n    });\n  }\n}\n"]}