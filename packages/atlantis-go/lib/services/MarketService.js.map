{"version":3,"file":"MarketService.js","sourceRoot":"","sources":["../../src/services/MarketService.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @file MarketService.ts\n * @description Service for handling marketplace, transactions, and resources\n */\n\nimport { MarketRepository, ResourceInventoryDocument, MarketListingDocument, TransactionDocument } from '../database/repositories/MarketRepository.js';\nimport { getDatabase, connectDatabase } from '../database/index.js';\nimport { nanoid } from 'nanoid';\n\n/**\n * Economic layers of the market\n */\nconst ECONOMIC_LAYERS = {\n  PORT: \"Basic exchange of resources and items\",\n  LAWS: \"Advanced marketplace with contracts and services\",\n  REPUBLIC: \"High-level economic governance and policy\"\n};\n\n/**\n * Resource types available in the game\n */\nconst RESOURCE_TYPES = {\n  DATA: \"Digital information and statistics\",\n  ENERGY: \"Power for devices and abilities\",\n  WISDOM: \"Knowledge and insights\",\n  MATERIALS: \"Physical construction resources\",\n  INFLUENCE: \"Social capital and connections\",\n  CURRENCY: \"Standard coins for transactions\"\n};\n\n/**\n * Market Service for handling marketplace functionality\n */\nclass MarketService {\n  private repository: MarketRepository;\n  private mockData: boolean = false;\n  \n  constructor() {\n    this.repository = new MarketRepository();\n  }\n  \n  /**\n   * Initialize the service, connecting to database\n   */\n  async initialize(): Promise<void> {\n    try {\n      await connectDatabase();\n      console.log(\"MarketService initialized with database connection\");\n    } catch (error) {\n      console.error(\"Failed to initialize MarketService:\", error);\n      this.mockData = true;\n      console.log(\"Using mock data for MarketService\");\n    }\n  }\n  \n  /**\n   * Get a resource inventory for an owner\n   */\n  async getResourceInventory(ownerId: string, ownerType: string): Promise<ResourceInventoryDocument | null> {\n    try {\n      return await this.repository.getResourceInventory(ownerId, ownerType);\n    } catch (error) {\n      console.error(`Error getting resource inventory for ${ownerType} ${ownerId}:`, error);\n      return null;\n    }\n  }\n  \n  /**\n   * Update a resource inventory\n   */\n  async updateResourceInventory(\n    ownerId: string,\n    ownerType: string,\n    resources: Record<string, number>,\n    maxCapacity?: Record<string, number>\n  ): Promise<boolean> {\n    try {\n      return await this.repository.updateResourceInventory(ownerId, ownerType, resources, maxCapacity);\n    } catch (error) {\n      console.error(`Error updating resource inventory for ${ownerType} ${ownerId}:`, error);\n      return false;\n    }\n  }\n  \n  /**\n   * Add resources to an inventory\n   */\n  async addResources(\n    ownerId: string,\n    ownerType: string,\n    resources: Record<string, number>\n  ): Promise<boolean> {\n    try {\n      return await this.repository.addResources(ownerId, ownerType, resources);\n    } catch (error) {\n      console.error(`Error adding resources to ${ownerType} ${ownerId}:`, error);\n      return false;\n    }\n  }\n  \n  /**\n   * Remove resources from an inventory\n   */\n  async removeResources(\n    ownerId: string,\n    ownerType: string,\n    resources: Record<string, number>\n  ): Promise<boolean> {\n    try {\n      return await this.repository.removeResources(ownerId, ownerType, resources);\n    } catch (error) {\n      console.error(`Error removing resources from ${ownerType} ${ownerId}:`, error);\n      return false;\n    }\n  }\n  \n  /**\n   * Transfer resources between inventories\n   */\n  async transferResources(\n    fromOwnerId: string,\n    fromOwnerType: string,\n    toOwnerId: string,\n    toOwnerType: string,\n    resources: Record<string, number>\n  ): Promise<boolean> {\n    try {\n      // First check if sender has enough resources\n      const fromInventory = await this.repository.getResourceInventory(fromOwnerId, fromOwnerType);\n      if (!fromInventory) {\n        throw new Error(`Source inventory for ${fromOwnerType} ${fromOwnerId} not found`);\n      }\n      \n      // Check if there are enough resources\n      for (const [type, quantity] of Object.entries(resources)) {\n        const available = fromInventory.resources[type] || 0;\n        if (available < quantity) {\n          throw new Error(`Not enough ${type} resources (have ${available}, need ${quantity})`);\n        }\n      }\n      \n      // Remove from sender\n      const removeResult = await this.repository.removeResources(fromOwnerId, fromOwnerType, resources);\n      if (!removeResult) {\n        throw new Error(\"Failed to remove resources from sender\");\n      }\n      \n      // Add to recipient\n      const addResult = await this.repository.addResources(toOwnerId, toOwnerType, resources);\n      if (!addResult) {\n        // Rollback the removal if adding fails\n        await this.repository.addResources(fromOwnerId, fromOwnerType, resources);\n        throw new Error(\"Failed to add resources to recipient\");\n      }\n      \n      return true;\n    } catch (error) {\n      console.error(`Error transferring resources from ${fromOwnerType} ${fromOwnerId} to ${toOwnerType} ${toOwnerId}:`, error);\n      return false;\n    }\n  }\n  \n  /**\n   * Create a market listing\n   */\n  async createListing(listing: Partial<MarketListingDocument>): Promise<MarketListingDocument | null> {\n    try {\n      if (!listing.title || !listing.seller || !listing.item || !listing.pricing) {\n        throw new Error(\"Listing must have title, seller, item, and pricing information\");\n      }\n      \n      const now = new Date();\n      const expiresDate = new Date();\n      expiresDate.setDate(now.getDate() + 7); // Default 7-day listing\n      \n      const listingDoc: Omit<MarketListingDocument, '_id' | 'createdAt' | 'updatedAt'> = {\n        title: listing.title,\n        description: listing.description || \"\",\n        seller: {\n          id: listing.seller.id,\n          type: listing.seller.type,\n          name: listing.seller.name,\n          rating: listing.seller.rating || 0\n        },\n        item: {\n          type: listing.item.type,\n          id: listing.item.id,\n          properties: listing.item.properties || {},\n          images: listing.item.images || []\n        },\n        pricing: {\n          price: listing.pricing.price,\n          currency: listing.pricing.currency || \"Coins\",\n          negotiable: listing.pricing.negotiable || false,\n          auction: listing.pricing.auction,\n          economicLayer: listing.pricing.economicLayer || \"PORT\"\n        },\n        status: \"Active\",\n        listed: now,\n        expires: listing.expires || expiresDate,\n        terms: listing.terms || {\n          delivery: \"Immediate\",\n          returns: false,\n          conditions: []\n        },\n        tags: listing.tags || []\n      };\n      \n      return await this.repository.createListing(listingDoc);\n    } catch (error) {\n      console.error(\"Error creating market listing:\", error);\n      return null;\n    }\n  }\n  \n  /**\n   * Get market listings with optional filtering\n   */\n  async getListings(\n    filter: Partial<MarketListingDocument> = {},\n    limit: number = 100\n  ): Promise<MarketListingDocument[]> {\n    try {\n      // Always include active status unless explicitly filtered\n      if (!filter.status) {\n        filter.status = \"Active\";\n      }\n      \n      return await this.repository.findListings(filter, limit);\n    } catch (error) {\n      console.error(\"Error getting market listings:\", error);\n      return [];\n    }\n  }\n  \n  /**\n   * Get a market listing by ID\n   */\n  async getListingById(id: string): Promise<MarketListingDocument | null> {\n    try {\n      return await this.repository.findListingById(id);\n    } catch (error) {\n      console.error(`Error getting market listing with ID ${id}:`, error);\n      return null;\n    }\n  }\n  \n  /**\n   * Update a market listing\n   */\n  async updateListing(id: string, updates: Partial<MarketListingDocument>): Promise<boolean> {\n    try {\n      return await this.repository.updateListing(id, updates);\n    } catch (error) {\n      console.error(`Error updating market listing with ID ${id}:`, error);\n      return false;\n    }\n  }\n  \n  /**\n   * Cancel a market listing\n   */\n  async cancelListing(id: string): Promise<boolean> {\n    try {\n      return await this.repository.cancelListing(id);\n    } catch (error) {\n      console.error(`Error cancelling market listing with ID ${id}:`, error);\n      return false;\n    }\n  }\n  \n  /**\n   * Place a bid on an auction listing\n   */\n  async placeBid(listingId: string, userId: string, amount: number): Promise<boolean> {\n    try {\n      return await this.repository.placeBid(listingId, userId, amount);\n    } catch (error) {\n      console.error(`Error placing bid for user ${userId} on listing ${listingId}:`, error);\n      return false;\n    }\n  }\n  \n  /**\n   * Purchase an item from a listing\n   */\n  async purchaseItem(\n    listingId: string,\n    buyerId: string,\n    buyerType: string = \"User\"\n  ): Promise<TransactionDocument | null> {\n    try {\n      const listing = await this.repository.findListingById(listingId);\n      if (!listing) {\n        throw new Error(`Listing with ID ${listingId} not found`);\n      }\n      \n      if (listing.status !== \"Active\") {\n        throw new Error(`Listing is not active (status: ${listing.status})`);\n      }\n      \n      // Check if auction and handle accordingly\n      if (listing.pricing.auction) {\n        const now = new Date();\n        if (now < listing.pricing.auction.endTime) {\n          throw new Error(\"Auction is still in progress\");\n        }\n        \n        // Check if buyer is highest bidder\n        const highestBid = listing.pricing.auction.bidHistory.sort((a, b) => b.amount - a.amount)[0];\n        if (!highestBid || highestBid.userId !== buyerId) {\n          throw new Error(\"Only the highest bidder can complete the purchase\");\n        }\n      }\n      \n      // Create the transaction\n      const now = new Date();\n      const transaction: Omit<TransactionDocument, '_id'> = {\n        type: \"Purchase\",\n        buyer: {\n          id: buyerId,\n          type: buyerType\n        },\n        seller: {\n          id: listing.seller.id,\n          type: listing.seller.type\n        },\n        item: {\n          type: listing.item.type,\n          id: listing.item.id,\n          name: listing.title,\n          details: listing.item.properties\n        },\n        financial: {\n          amount: listing.pricing.auction ? \n                  listing.pricing.auction.currentBid : \n                  listing.pricing.price,\n          currency: listing.pricing.currency,\n          fee: 0.05 * listing.pricing.price, // 5% marketplace fee\n          taxesIncluded: true\n        },\n        timestamps: {\n          created: now\n        },\n        status: \"Pending\",\n        marketListingId: listingId,\n        metadata: {}\n      };\n      \n      // Create the transaction and mark listing as sold\n      const result = await this.repository.createTransaction(transaction);\n      \n      if (result) {\n        // Transfer the payment from buyer to seller\n        const resources = {\n          [transaction.financial.currency]: transaction.financial.amount\n        };\n        \n        // In a real implementation, would verify funds first\n        await this.transferResources(buyerId, buyerType, listing.seller.id, listing.seller.type, resources);\n        \n        // Mark transaction as completed\n        await this.repository.updateTransactionStatus(result._id.toString(), \"Completed\");\n      }\n      \n      return result;\n    } catch (error) {\n      console.error(`Error purchasing item from listing ${listingId} by buyer ${buyerId}:`, error);\n      return null;\n    }\n  }\n  \n  /**\n   * Get transactions for a user\n   */\n  async getUserTransactions(userId: string): Promise<TransactionDocument[]> {\n    try {\n      return await this.repository.getUserTransactions(userId);\n    } catch (error) {\n      console.error(`Error getting transactions for user ${userId}:`, error);\n      return [];\n    }\n  }\n  \n  /**\n   * Get transaction by ID\n   */\n  async getTransactionById(id: string): Promise<TransactionDocument | null> {\n    try {\n      return await this.repository.findTransactionById(id);\n    } catch (error) {\n      console.error(`Error getting transaction with ID ${id}:`, error);\n      return null;\n    }\n  }\n  \n  /**\n   * Update transaction status\n   */\n  async updateTransactionStatus(id: string, status: string): Promise<boolean> {\n    try {\n      return await this.repository.updateTransactionStatus(id, status);\n    } catch (error) {\n      console.error(`Error updating status for transaction ${id}:`, error);\n      return false;\n    }\n  }\n  \n  /**\n   * Create a reward transaction (e.g., for completing experiences)\n   */\n  async createRewardTransaction(\n    userId: string,\n    rewards: {\n      coins?: number;\n      resources?: Record<string, number>;\n      items?: { id: string; type: string; name: string; }[];\n    }\n  ): Promise<TransactionDocument | null> {\n    try {\n      const now = new Date();\n      \n      // Add coins to resources if present\n      const resources = { ...rewards.resources };\n      if (rewards.coins && rewards.coins > 0) {\n        resources.COINS = (resources.COINS || 0) + rewards.coins;\n      }\n      \n      // Create the transaction\n      const transaction: Omit<TransactionDocument, '_id'> = {\n        type: \"Reward\",\n        buyer: {\n          id: userId,\n          type: \"User\"\n        },\n        seller: {\n          id: \"system\",\n          type: \"System\"\n        },\n        item: {\n          type: \"Reward\",\n          name: \"Experience Reward\",\n          details: {\n            resources,\n            items: rewards.items || []\n          }\n        },\n        financial: {\n          amount: rewards.coins || 0,\n          currency: \"Coins\",\n          fee: 0,\n          taxesIncluded: true\n        },\n        timestamps: {\n          created: now,\n          completed: now\n        },\n        status: \"Completed\",\n        metadata: {\n          source: \"Experience\",\n          timestamp: now.toISOString()\n        }\n      };\n      \n      // Create transaction\n      const result = await this.repository.createTransaction(transaction);\n      \n      if (result) {\n        // Add resources to user inventory\n        if (Object.keys(resources).length > 0) {\n          await this.addResources(userId, \"User\", resources);\n        }\n        \n        // In a real implementation, would also handle item awards\n      }\n      \n      return result;\n    } catch (error) {\n      console.error(`Error creating reward transaction for user ${userId}:`, error);\n      return null;\n    }\n  }\n  \n  /**\n   * Get the access level for a user based on their economic tier\n   */\n  getEconomicTierAccess(tier: string): string[] {\n    const tiers = {\n      PORT: [\"PORT\"],\n      LAWS: [\"PORT\", \"LAWS\"],\n      REPUBLIC: [\"PORT\", \"LAWS\", \"REPUBLIC\"]\n    };\n    \n    return tiers[tier] || tiers.PORT;\n  }\n  \n  /**\n   * Check if a user can access a specific economic layer\n   */\n  canAccessEconomicLayer(userTier: string, requiredLayer: string): boolean {\n    const access = this.getEconomicTierAccess(userTier);\n    return access.includes(requiredLayer);\n  }\n  \n  /**\n   * Get resource costs for different economic levels\n   */\n  getResourceRequirements(level: number): Record<string, number> {\n    const requirements = {\n      1: { DATA: 100, ENERGY: 100 },\n      2: { DATA: 500, ENERGY: 500, WISDOM: 100 },\n      3: { DATA: 2000, ENERGY: 2000, WISDOM: 500, MATERIALS: 500 },\n      4: { DATA: 10000, ENERGY: 10000, WISDOM: 2000, MATERIALS: 2000, INFLUENCE: 1000 }\n    };\n    \n    return requirements[level] || requirements[1];\n  }\n}\n\nexport default new MarketService(); "]}