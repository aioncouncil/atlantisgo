{"version":3,"file":"ZoneService.js","sourceRoot":"","sources":["../../src/services/ZoneService.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @file ZoneService.ts\n * @description Service for managing zones, zone control, and raid mechanics\n */\n\nimport { nanoid } from 'nanoid';\nimport { ZoneRepository, ZoneDocument, ZoneMembershipDocument, RaidDocument } from '../database/repositories/ZoneRepository.js';\nimport { MarketRepository } from '../database/repositories/MarketRepository.js';\nimport { getDatabase, connectDatabase } from '../database/index.js';\n\n/**\n * Zone types\n */\nconst ZONE_TYPES = {\n  PUBLIC: \"Public area open to all\",\n  PRIVATE: \"Private area with restricted access\",\n  COMMERCIAL: \"Commercial zone for marketplace activities\",\n  EDUCATIONAL: \"Zone focused on learning and development\",\n  RECREATIONAL: \"Zone for entertainment and leisure\",\n  WILDERNESS: \"Undeveloped natural area\",\n  SPECIAL: \"Special purpose zone with unique properties\"\n};\n\n/**\n * Raid types\n */\nconst RAID_TYPES = {\n  CONQUEST: \"Take control of a zone\",\n  RESOURCE: \"Gather resources from a zone\",\n  CHALLENGE: \"Special competition for reputation\",\n  TOURNAMENT: \"Formal competitive event\"\n};\n\n/**\n * Zone Service for managing zone-related functionality\n */\nclass ZoneService {\n  private repository: ZoneRepository;\n  private marketRepository: MarketRepository;\n  private mockData: boolean = false;\n  \n  constructor() {\n    this.repository = new ZoneRepository();\n    this.marketRepository = new MarketRepository();\n  }\n  \n  /**\n   * Initialize the service, connecting to database\n   */\n  async initialize(): Promise<void> {\n    try {\n      await connectDatabase();\n      console.log(\"ZoneService initialized with database connection\");\n    } catch (error) {\n      console.error(\"Failed to initialize ZoneService:\", error);\n      this.mockData = true;\n      console.log(\"Using mock data for ZoneService\");\n    }\n  }\n  \n  /**\n   * Get all zones\n   */\n  async getAllZones(): Promise<ZoneDocument[]> {\n    try {\n      return await this.repository.find();\n    } catch (error) {\n      console.error(\"Error getting all zones:\", error);\n      return this.getMockZones();\n    }\n  }\n  \n  /**\n   * Get zones near a location\n   */\n  async getZonesNearLocation(longitude: number, latitude: number, maxDistance: number = 5000): Promise<ZoneDocument[]> {\n    try {\n      return await this.repository.findNearLocation(longitude, latitude, maxDistance);\n    } catch (error) {\n      console.error(\"Error getting zones near location:\", error);\n      return [];\n    }\n  }\n  \n  /**\n   * Get zone by ID\n   */\n  async getZoneById(id: string): Promise<ZoneDocument | null> {\n    try {\n      return await this.repository.findById(id);\n    } catch (error) {\n      console.error(`Error getting zone with ID ${id}:`, error);\n      return null;\n    }\n  }\n  \n  /**\n   * Create a new zone\n   */\n  async createZone(zone: Partial<ZoneDocument>): Promise<ZoneDocument | null> {\n    try {\n      if (!zone.name || !zone.type) {\n        throw new Error(\"Zone must have a name and type\");\n      }\n      \n      // Generate a unique ID for the zone\n      const zoneDoc: Omit<ZoneDocument, '_id' | 'createdAt' | 'updatedAt'> = {\n        name: zone.name,\n        description: zone.description || \"\",\n        type: zone.type,\n        sector: zone.sector || {\n          id: \"sector-\" + nanoid(6),\n          name: \"Default Sector\",\n          type: \"Mixed\"\n        },\n        geometry: zone.geometry || {\n          type: \"Point\",\n          coordinates: [[0, 0]],\n          center: [0, 0]\n        },\n        rank: zone.rank || 1,\n        ownership: zone.ownership || {\n          controlledBy: \"\",\n          controlledSince: new Date(),\n          previousOwners: []\n        },\n        properties: zone.properties || {\n          capacity: 10,\n          amenities: [],\n          rating: 0,\n          price: 0,\n          availability: []\n        },\n        activity: zone.activity || {\n          currentUsers: 0,\n          popularTimes: {},\n          events: []\n        },\n        resources: zone.resources || [],\n        tech: zone.tech || {\n          unlockedPowers: [],\n          currentPhase: \"Initial\",\n          specialAbilities: []\n        },\n        visuals: zone.visuals || {\n          theme: \"Standard\",\n          icon: \"\",\n          banner: \"\"\n        }\n      };\n      \n      return await this.repository.create(zoneDoc);\n    } catch (error) {\n      console.error(\"Error creating zone:\", error);\n      return null;\n    }\n  }\n  \n  /**\n   * Update an existing zone\n   */\n  async updateZone(id: string, updates: Partial<ZoneDocument>): Promise<boolean> {\n    try {\n      return await this.repository.update(id, updates);\n    } catch (error) {\n      console.error(`Error updating zone with ID ${id}:`, error);\n      return false;\n    }\n  }\n  \n  /**\n   * Update zone ownership\n   */\n  async updateZoneOwnership(zoneId: string, teamId: string): Promise<boolean> {\n    try {\n      return await this.repository.updateOwnership(zoneId, teamId);\n    } catch (error) {\n      console.error(`Error updating ownership for zone ${zoneId}:`, error);\n      return false;\n    }\n  }\n  \n  /**\n   * Get zones controlled by a team\n   */\n  async getTeamControlledZones(teamId: string): Promise<ZoneDocument[]> {\n    try {\n      return await this.repository.getTeamControlledZones(teamId);\n    } catch (error) {\n      console.error(`Error getting zones controlled by team ${teamId}:`, error);\n      return [];\n    }\n  }\n  \n  /**\n   * Get a user's zone memberships\n   */\n  async getUserZoneMemberships(userId: string): Promise<ZoneMembershipDocument[]> {\n    try {\n      return await this.repository.getUserZoneMemberships(userId);\n    } catch (error) {\n      console.error(`Error getting zone memberships for user ${userId}:`, error);\n      return [];\n    }\n  }\n  \n  /**\n   * Add a user to a zone\n   */\n  async addUserToZone(userId: string, zoneId: string, role: string = \"Member\"): Promise<ZoneMembershipDocument | null> {\n    try {\n      return await this.repository.addUserToZone(userId, zoneId, role);\n    } catch (error) {\n      console.error(`Error adding user ${userId} to zone ${zoneId}:`, error);\n      return null;\n    }\n  }\n  \n  /**\n   * Update a user's zone role\n   */\n  async updateUserZoneRole(userId: string, zoneId: string, role: string): Promise<boolean> {\n    try {\n      return await this.repository.updateUserZoneRole(userId, zoneId, role);\n    } catch (error) {\n      console.error(`Error updating role for user ${userId} in zone ${zoneId}:`, error);\n      return false;\n    }\n  }\n  \n  /**\n   * Check if a user is a member of a zone\n   */\n  async isUserZoneMember(userId: string, zoneId: string): Promise<boolean> {\n    try {\n      const memberships = await this.repository.getUserZoneMemberships(userId);\n      return memberships.some(m => m.zoneId === zoneId);\n    } catch (error) {\n      console.error(`Error checking if user ${userId} is member of zone ${zoneId}:`, error);\n      return false;\n    }\n  }\n  \n  /**\n   * Track user activity in a zone\n   */\n  async trackUserActivity(userId: string, zoneId: string): Promise<boolean> {\n    try {\n      // Update the zone's current user count\n      const zone = await this.repository.findById(zoneId);\n      if (!zone) {\n        return false;\n      }\n      \n      // Update popular times data\n      const now = new Date();\n      const dayHour = `${now.getDay()}-${now.getHours()}`;\n      \n      const popularTimes = { ...zone.activity.popularTimes };\n      popularTimes[dayHour] = (popularTimes[dayHour] || 0) + 1;\n      \n      // Update zone activity\n      await this.repository.update(zoneId, {\n        activity: {\n          ...zone.activity,\n          currentUsers: zone.activity.currentUsers + 1,\n          popularTimes\n        }\n      });\n      \n      // Update user's last active time in membership\n      const membership = await this.repository.getUserZoneMemberships(userId)\n        .then(memberships => memberships.find(m => m.zoneId === zoneId));\n        \n      if (membership) {\n        await this.repository.updateUserZoneRole(userId, zoneId, membership.role);\n      } else {\n        // If not already a member, add them\n        await this.repository.addUserToZone(userId, zoneId, \"Visitor\");\n      }\n      \n      return true;\n    } catch (error) {\n      console.error(`Error tracking activity for user ${userId} in zone ${zoneId}:`, error);\n      return false;\n    }\n  }\n  \n  /**\n   * Add resources to a zone\n   */\n  async addZoneResources(zoneId: string, resources: Record<string, number>): Promise<boolean> {\n    try {\n      const zone = await this.repository.findById(zoneId);\n      if (!zone) {\n        return false;\n      }\n      \n      // Update zone resources\n      const updatedResources = [...zone.resources];\n      \n      for (const [type, quantity] of Object.entries(resources)) {\n        const existingResource = updatedResources.find(r => r.type === type);\n        \n        if (existingResource) {\n          existingResource.quantity += quantity;\n          existingResource.lastUpdated = new Date();\n        } else {\n          updatedResources.push({\n            type,\n            quantity,\n            regenerationRate: 0,\n            lastUpdated: new Date()\n          });\n        }\n      }\n      \n      return await this.repository.update(zoneId, {\n        resources: updatedResources\n      });\n    } catch (error) {\n      console.error(`Error adding resources to zone ${zoneId}:`, error);\n      return false;\n    }\n  }\n  \n  /**\n   * Create a new raid\n   */\n  async createRaid(\n    raidType: string,\n    attackerTeamId: string,\n    targetZoneId: string,\n    participantIds: string[],\n    startTime: Date\n  ): Promise<RaidDocument | null> {\n    try {\n      const zone = await this.repository.findById(targetZoneId);\n      if (!zone) {\n        throw new Error(`Zone with ID ${targetZoneId} not found`);\n      }\n      \n      const defenderTeamId = zone.ownership.controlledBy;\n      if (!defenderTeamId && raidType === \"CONQUEST\") {\n        // If no defender, this is a free claim\n        await this.repository.updateOwnership(targetZoneId, attackerTeamId);\n        return null;\n      }\n      \n      // Create raid participants\n      const now = new Date();\n      const raidParticipants = participantIds.map(userId => ({\n        userId,\n        teamId: attackerTeamId,\n        role: \"Attacker\",\n        joinTime: now,\n        score: 0\n      }));\n      \n      // Create the raid\n      const preparationStart = new Date();\n      preparationStart.setHours(startTime.getHours() - 1); // 1 hour prep time\n      \n      const raidDoc: Omit<RaidDocument, '_id' | 'createdAt'> = {\n        type: raidType,\n        status: \"Scheduled\",\n        target: {\n          zoneId: targetZoneId,\n          controllingTeamId: defenderTeamId\n        },\n        attacker: {\n          teamId: attackerTeamId,\n          members: raidParticipants,\n          readiness: 0\n        },\n        defender: {\n          teamId: defenderTeamId,\n          members: [], // Will be populated when defenders join\n          defenseBonus: zone.rank * 5 // 5% bonus per zone rank\n        },\n        schedule: {\n          announced: now,\n          preparationStart,\n          raidStart: startTime,\n          estimatedDuration: 60 // 60 minutes\n        },\n        mechanics: {\n          format: raidType === \"CONQUEST\" ? \"Capture\" : \"Points\",\n          winCondition: raidType === \"CONQUEST\" ? \"Capture the zone flag\" : \"Score more points than defenders\",\n          phases: [\"Preparation\", \"Attack\", \"Defense\", \"Resolution\"],\n          specialRules: []\n        },\n        rewards: {\n          winner: {\n            xp: 100 * zone.rank,\n            coins: 50 * zone.rank,\n            zoneControl: raidType === \"CONQUEST\"\n          },\n          participation: {\n            xp: 25 * zone.rank,\n            coins: 10 * zone.rank\n          }\n        },\n        feeds: [{\n          timestamp: now,\n          message: `Raid ${raidType} scheduled by team ${attackerTeamId} against zone ${zone.name}`,\n          eventType: \"RAID_SCHEDULED\"\n        }]\n      };\n      \n      return await this.repository.createRaid(raidDoc);\n    } catch (error) {\n      console.error(`Error creating raid for zone ${targetZoneId}:`, error);\n      return null;\n    }\n  }\n  \n  /**\n   * Join a raid as a defender\n   */\n  async joinRaidAsDefender(raidId: string, userId: string, teamId: string): Promise<boolean> {\n    try {\n      const raid = await this.repository.findRaidById(raidId);\n      if (!raid) {\n        throw new Error(`Raid with ID ${raidId} not found`);\n      }\n      \n      // Verify this is the defending team\n      if (raid.defender.teamId !== teamId) {\n        throw new Error(`User ${userId} team ${teamId} is not the defending team`);\n      }\n      \n      // Check if user is already a participant\n      const existingParticipant = raid.defender.members.find(m => m.userId === userId);\n      if (existingParticipant) {\n        return true; // Already joined\n      }\n      \n      // Add user as defender\n      const updatedDefenders = [...raid.defender.members, {\n        userId,\n        teamId,\n        role: \"Defender\",\n        joinTime: new Date(),\n        score: 0\n      }];\n      \n      const result = await this.repository.findRaidById(raidId);\n      if (!result) {\n        return false;\n      }\n      \n      return await this.addRaidFeedEntry(\n        raidId,\n        `User ${userId} joined as defender for team ${teamId}`,\n        \"DEFENDER_JOINED\"\n      );\n    } catch (error) {\n      console.error(`Error joining raid ${raidId} as defender for user ${userId}:`, error);\n      return false;\n    }\n  }\n  \n  /**\n   * Start a scheduled raid\n   */\n  async startRaid(raidId: string): Promise<boolean> {\n    try {\n      const raid = await this.repository.findRaidById(raidId);\n      if (!raid) {\n        throw new Error(`Raid with ID ${raidId} not found`);\n      }\n      \n      if (raid.status !== \"Scheduled\") {\n        throw new Error(`Raid ${raidId} is not in Scheduled status`);\n      }\n      \n      // Update raid status to InProgress\n      await this.repository.updateRaidStatus(raidId, \"InProgress\");\n      \n      // Add feed entry\n      return await this.addRaidFeedEntry(\n        raidId,\n        `Raid has started! Attackers: ${raid.attacker.members.length}, Defenders: ${raid.defender.members.length}`,\n        \"RAID_STARTED\"\n      );\n    } catch (error) {\n      console.error(`Error starting raid ${raidId}:`, error);\n      return false;\n    }\n  }\n  \n  /**\n   * Complete a raid with results\n   */\n  async completeRaid(raidId: string, attackerScore: number, defenderScore: number, mvpUserId?: string): Promise<boolean> {\n    try {\n      const raid = await this.repository.findRaidById(raidId);\n      if (!raid) {\n        throw new Error(`Raid with ID ${raidId} not found`);\n      }\n      \n      if (raid.status !== \"InProgress\") {\n        throw new Error(`Raid ${raidId} is not in InProgress status`);\n      }\n      \n      // Determine winner\n      const attackerWins = attackerScore > defenderScore;\n      const winnerTeamId = attackerWins ? raid.attacker.teamId : raid.defender.teamId;\n      \n      // Create results\n      const results = {\n        winner: winnerTeamId,\n        score: {\n          attacker: attackerScore,\n          defender: defenderScore\n        },\n        mvp: mvpUserId || \"\",\n        highlights: [\n          `${attackerWins ? \"Attackers\" : \"Defenders\"} won with a score of ${attackerWins ? attackerScore : defenderScore} to ${attackerWins ? defenderScore : attackerScore}`\n        ],\n        zoneChanges: {}\n      };\n      \n      // If it was a conquest raid and attackers won, transfer zone ownership\n      if (raid.type === \"CONQUEST\" && attackerWins) {\n        await this.repository.updateOwnership(raid.target.zoneId, raid.attacker.teamId);\n        results.zoneChanges = {\n          ownershipTransferred: true,\n          previousOwner: raid.defender.teamId,\n          newOwner: raid.attacker.teamId\n        };\n      }\n      \n      // Update raid status to Completed with results\n      await this.repository.updateRaidStatus(raidId, \"Completed\", results);\n      \n      // Add feed entry\n      return await this.addRaidFeedEntry(\n        raidId,\n        `Raid completed! Winner: ${winnerTeamId}, Score: ${attackerScore}-${defenderScore}`,\n        \"RAID_COMPLETED\"\n      );\n    } catch (error) {\n      console.error(`Error completing raid ${raidId}:`, error);\n      return false;\n    }\n  }\n  \n  /**\n   * Cancel a scheduled raid\n   */\n  async cancelRaid(raidId: string, reason: string): Promise<boolean> {\n    try {\n      const raid = await this.repository.findRaidById(raidId);\n      if (!raid) {\n        throw new Error(`Raid with ID ${raidId} not found`);\n      }\n      \n      if (raid.status !== \"Scheduled\") {\n        throw new Error(`Raid ${raidId} cannot be cancelled in ${raid.status} status`);\n      }\n      \n      // Update raid status to Cancelled\n      await this.repository.updateRaidStatus(raidId, \"Cancelled\");\n      \n      // Add feed entry\n      return await this.addRaidFeedEntry(\n        raidId,\n        `Raid cancelled: ${reason}`,\n        \"RAID_CANCELLED\"\n      );\n    } catch (error) {\n      console.error(`Error cancelling raid ${raidId}:`, error);\n      return false;\n    }\n  }\n  \n  /**\n   * Get active raids for a zone\n   */\n  async getActiveZoneRaids(zoneId: string): Promise<RaidDocument[]> {\n    try {\n      return await this.repository.getActiveZoneRaids(zoneId);\n    } catch (error) {\n      console.error(`Error getting active raids for zone ${zoneId}:`, error);\n      return [];\n    }\n  }\n  \n  /**\n   * Get raids for a team\n   */\n  async getTeamRaids(teamId: string): Promise<RaidDocument[]> {\n    try {\n      return await this.repository.getTeamRaids(teamId);\n    } catch (error) {\n      console.error(`Error getting raids for team ${teamId}:`, error);\n      return [];\n    }\n  }\n  \n  /**\n   * Add a feed entry to a raid\n   */\n  async addRaidFeedEntry(raidId: string, message: string, eventType: string): Promise<boolean> {\n    try {\n      return await this.repository.addRaidFeedEntry(raidId, message, eventType);\n    } catch (error) {\n      console.error(`Error adding feed entry to raid ${raidId}:`, error);\n      return false;\n    }\n  }\n  \n  /**\n   * Get zone rank requirements\n   */\n  getZoneRankRequirements(rank: number): any {\n    const requirements = {\n      1: {\n        minTeamMembers: 1,\n        minTeamLevel: 1,\n        minResources: 100,\n        minPowerLevel: 5\n      },\n      2: {\n        minTeamMembers: 3,\n        minTeamLevel: 5,\n        minResources: 500,\n        minPowerLevel: 15\n      },\n      3: {\n        minTeamMembers: 5,\n        minTeamLevel: 10,\n        minResources: 2000,\n        minPowerLevel: 30\n      },\n      4: {\n        minTeamMembers: 10,\n        minTeamLevel: 20,\n        minResources: 10000,\n        minPowerLevel: 50\n      }\n    };\n    \n    return requirements[rank] || requirements[1];\n  }\n  \n  // Helper method to generate mock zones for testing\n  private getMockZones(): ZoneDocument[] {\n    const mockZone: any = {\n      _id: \"mock1\",\n      name: \"Downtown Tech Hub\",\n      description: \"A bustling technological center in the heart of the city\",\n      type: \"COMMERCIAL\",\n      sector: {\n        id: \"sector-downtown\",\n        name: \"Downtown\",\n        type: \"Urban\"\n      },\n      geometry: {\n        type: \"Point\",\n        coordinates: [[0, 0]],\n        center: [0, 0]\n      },\n      rank: 2,\n      ownership: {\n        controlledBy: \"team1\",\n        controlledSince: new Date(),\n        previousOwners: []\n      },\n      properties: {\n        capacity: 50,\n        amenities: [\"WiFi\", \"Coffee Shop\", \"Conference Rooms\"],\n        rating: 4.5,\n        price: 150,\n        availability: []\n      },\n      activity: {\n        currentUsers: 12,\n        popularTimes: {},\n        events: []\n      },\n      resources: [\n        {\n          type: \"Data\",\n          quantity: 500,\n          regenerationRate: 10,\n          lastUpdated: new Date()\n        },\n        {\n          type: \"Energy\",\n          quantity: 300,\n          regenerationRate: 5,\n          lastUpdated: new Date()\n        }\n      ],\n      tech: {\n        unlockedPowers: [\"power1\", \"power2\"],\n        currentPhase: \"Advanced\",\n        specialAbilities: [\"Fast Travel\", \"Resource Boost\"]\n      },\n      visuals: {\n        theme: \"High Tech\",\n        icon: \"tech-icon.png\",\n        banner: \"tech-banner.jpg\"\n      },\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    \n    return [mockZone];\n  }\n}\n\nexport default new ZoneService(); "]}