{"version":3,"file":"ExperienceService.js","sourceRoot":"","sources":["../../src/services/ExperienceService.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,EAAE,oBAAoB,EAAE,MAAM,+CAA+C,CAAC;AAErF,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAsDhC,MAAM,OAAO,iBAAiB;IAI5B;QACE,IAAI,CAAC,UAAU,GAAG,IAAI,oBAAoB,EAAE,CAAC;QAC7C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACvB,CAAC;IAED,MAAM,CAAC,0BAA0B,CAAC,MAAgB,EAAE,MAAc,EAAE,KAAa;QAC/E,MAAM,WAAW,GAAiB,EAAE,CAAC;QACrC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;YAC/B,WAAW,CAAC,IAAI,CAAC;gBACf,EAAE,EAAE,MAAM,EAAE;gBACZ,IAAI,EAAE,cAAc,CAAC,GAAG,CAAC,EAAE;gBAC3B,WAAW,EAAE,mBAAmB;gBAChC,IAAI,EAAE,OAAO;gBACb,UAAU,EAAE,CAAC;gBACb,UAAU,EAAE,CAAC;gBACb,MAAM,EAAE;oBACN;wBACE,IAAI,EAAE,OAAO;wBACb,WAAW,EAAE,iBAAiB;wBAC9B,IAAI,EAAE,cAAc;wBACpB,QAAQ,EAAE,CAAC;qBACZ;iBACF;gBACD,iBAAiB,EAAE,EAAE;gBACrB,eAAe,EAAE,EAAE;gBACnB,QAAQ,EAAE,GAAG;gBACb,WAAW,EAAE,EAAE;gBACf,YAAY,EAAE,EAAE;gBAChB,aAAa,EAAE,EAAE;gBACjB,gBAAgB,EAAE,EAAE;gBACpB,aAAa,EAAE,EAAE;gBACjB,cAAc,EAAE,EAAE;aACnB,CAAC,CAAC;QACL,CAAC;QACD,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,MAAM,CAAC,4BAA4B,CAAC,UAAsB,EAAE,UAAkB,EAAE,YAAsB;QACpG,sBAAsB;QACtB,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;IAC7B,CAAC;IAED,MAAM,CAAC,wBAAwB,CAAC,YAAoB,EAAE,MAAqB;QACzE,OAAO;YACL,EAAE,EAAE,MAAM,EAAE;YACZ,YAAY;YACZ,MAAM;YACN,MAAM,EAAE,WAAW;YACnB,YAAY,EAAE,IAAI,GAAG,EAAE;YACvB,YAAY,EAAE,CAAC;YACf,cAAc,EAAE,IAAI,CAAC,GAAG,EAAE;YAE1B,cAAc,CAAC,QAAgB;gBAC7B,MAAM,IAAI,GAAG;oBACX,QAAQ,EAAE,IAAI,CAAC,GAAG,EAAE;oBACpB,MAAM,EAAE,QAAQ;oBAChB,QAAQ,EAAE,CAAC;iBACZ,CAAC;gBACF,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;gBACtC,OAAO,IAAI,CAAC;YACd,CAAC;YAED,iBAAiB,CAAC,QAAgB;gBAChC,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAC5C,CAAC;YAED,KAAK;gBACH,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC;gBAC3B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC9B,CAAC;YAED,QAAQ;gBACN,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC;YAC5B,CAAC;YAED,IAAI;gBACF,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;YACzB,CAAC;YAED,WAAW,CAAC,QAAgB,EAAE,OAAe;gBAC3C,sBAAsB;YACxB,CAAC;YAED,YAAY;gBACV,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,CAAC;SACF,CAAC;IACJ,CAAC;CACF","sourcesContent":["/**\n * @file services/ExperienceService.ts\n * @description Service for managing experiences and instances\n */\n\nimport { ExperienceRepository } from '../database/repositories/ExperienceRepository';\nimport { Position } from '../schemas/BaseSchema';\nimport { nanoid } from 'nanoid';\n\nexport interface Experience {\n  id: string;\n  name: string;\n  description: string;\n  type: string;\n  minPlayers: number;\n  maxPlayers: number;\n  phases: Phase[];\n  estimatedDuration: number;\n  maximumDuration: number;\n  xpReward: number;\n  coinsReward: number;\n  wisdomReward: number;\n  courageReward: number;\n  temperanceReward: number;\n  justiceReward: number;\n  strengthReward: number;\n}\n\nexport interface Phase {\n  name: string;\n  description: string;\n  type: string;\n  duration: number;\n}\n\nexport interface ExperienceInstance {\n  id: string;\n  experienceId: string;\n  zoneId: string | null;\n  status: 'Scheduled' | 'InProgress' | 'Completed' | 'Failed';\n  participants: Map<string, ParticipantData>;\n  currentPhase: number;\n  startTime?: number;\n  estimatedCompletionTime?: number;\n  lastUpdateTime: number;\n\n  addParticipant(playerId: string): ParticipantData;\n  removeParticipant(playerId: string): boolean;\n  start(): void;\n  complete(): void;\n  fail(): void;\n  addActivity(playerId: string, content: string): void;\n  advancePhase(): void;\n}\n\ninterface ParticipantData {\n  joinedAt: number;\n  status: string;\n  progress: number;\n}\n\nexport class ExperienceService {\n  private repository: ExperienceRepository;\n  private mockData: boolean;\n\n  constructor() {\n    this.repository = new ExperienceRepository();\n    this.mockData = true;\n  }\n\n  static generateExperiencesForArea(center: Position, radius: number, count: number): Experience[] {\n    const experiences: Experience[] = [];\n    for (let i = 0; i < count; i++) {\n      experiences.push({\n        id: nanoid(),\n        name: `Experience ${i + 1}`,\n        description: \"A test experience\",\n        type: \"Quest\",\n        minPlayers: 1,\n        maxPlayers: 4,\n        phases: [\n          {\n            name: \"Start\",\n            description: \"Beginning phase\",\n            type: \"introduction\",\n            duration: 5\n          }\n        ],\n        estimatedDuration: 30,\n        maximumDuration: 60,\n        xpReward: 100,\n        coinsReward: 50,\n        wisdomReward: 10,\n        courageReward: 10,\n        temperanceReward: 10,\n        justiceReward: 10,\n        strengthReward: 10\n      });\n    }\n    return experiences;\n  }\n\n  static checkExperienceQualification(experience: Experience, playerRank: number, playerPowers: string[]): { qualified: boolean; reason?: string } {\n    // Mock implementation\n    return { qualified: true };\n  }\n\n  static createExperienceInstance(experienceId: string, zoneId: string | null): ExperienceInstance {\n    return {\n      id: nanoid(),\n      experienceId,\n      zoneId,\n      status: 'Scheduled',\n      participants: new Map(),\n      currentPhase: 0,\n      lastUpdateTime: Date.now(),\n\n      addParticipant(playerId: string): ParticipantData {\n        const data = {\n          joinedAt: Date.now(),\n          status: 'joined',\n          progress: 0\n        };\n        this.participants.set(playerId, data);\n        return data;\n      },\n\n      removeParticipant(playerId: string): boolean {\n        return this.participants.delete(playerId);\n      },\n\n      start(): void {\n        this.status = 'InProgress';\n        this.startTime = Date.now();\n      },\n\n      complete(): void {\n        this.status = 'Completed';\n      },\n\n      fail(): void {\n        this.status = 'Failed';\n      },\n\n      addActivity(playerId: string, content: string): void {\n        // Mock implementation\n      },\n\n      advancePhase(): void {\n        this.currentPhase++;\n      }\n    };\n  }\n} "]}