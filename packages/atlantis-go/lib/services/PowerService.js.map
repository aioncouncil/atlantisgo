{"version":3,"file":"PowerService.js","sourceRoot":"","sources":["../../src/services/PowerService.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAC/C,OAAO,EAAE,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAClD,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAEhC,MAAM,YAAY;IAoBhB;;OAEG;IACK,MAAM,CAAC,sBAAsB,CAAC,MAAgB,EAAE,MAAc;QACpE,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;QAC1C,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC;QACxC,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;QAChD,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;QAChD,OAAO,IAAI,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5B,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,eAAe;QAC5B,MAAM,WAAW,GAAG,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE,CAAC,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC1F,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,WAAW,CAAC;QAEzC,KAAK,MAAM,MAAM,IAAI,YAAY,CAAC,QAAQ,EAAE,CAAC;YAC3C,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC;gBAC3B,OAAO,MAAM,CAAC,IAAI,CAAC;YACrB,CAAC;YACD,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC;QAC1B,CAAC;QAED,OAAO,QAAQ,CAAC,CAAC,WAAW;IAC9B,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,kBAAkB,CAAC,IAAY;QAC5C,MAAM,KAAK,GAAG,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC;QAC9E,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;IACzD,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,qBAAqB,CAAC,MAAgB,EAAE,MAAc,EAAE,KAAa;QAC1E,MAAM,MAAM,GAAY,EAAE,CAAC;QAE3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;YAC/B,6BAA6B;YAC7B,MAAM,IAAI,GAAG,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;YACjG,MAAM,MAAM,GAAG,YAAY,CAAC,eAAe,EAAE,CAAC;YAE9C,iBAAiB;YACjB,MAAM,KAAK,GAAG,IAAI,KAAK,CACrB,MAAM,EAAE,EACR,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,EACrC,IAAI,EACJ,MAAM,CACP,CAAC;YAEF,eAAe;YACf,MAAM,GAAG,GAAG,YAAY,CAAC,sBAAsB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YAChE,KAAK,CAAC,QAAQ,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;YACzB,KAAK,CAAC,QAAQ,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;YAEzB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACrB,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,aAAa,CAAC,KAAY;QAC/B,OAAO,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,GAAG,EAAE,IAAI,KAAK,CAAC,WAAW,CAAC;IAC5D,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,mBAAmB,CAAC,KAAY,EAAE,WAAmB;QAC1D,IAAI,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;QAExB,4DAA4D;QAC5D,IAAI,WAAW,GAAG,EAAE,EAAE,CAAC;YACrB,KAAK,IAAI,CAAC,CAAC,GAAG,CAAC,WAAW,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC;QAC1C,CAAC;QAED,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;;AAxGc,uBAAU,GAAG;IAC1B,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,YAAY;CAC7C,CAAC;AAEa,qBAAQ,GAAG;IACxB,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE;IAC9B,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,EAAE,EAAE;IAChC,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE,EAAE;IAC5B,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,EAAE;IAC3B,EAAE,IAAI,EAAE,WAAW,EAAE,MAAM,EAAE,CAAC,EAAE;CACjC,CAAC;AAEa,uBAAU,GAAG;IAC1B,MAAM,EAAE,CAAC,SAAS,EAAE,WAAW,EAAE,eAAe,EAAE,WAAW,EAAE,SAAS,CAAC;IACzE,OAAO,EAAE,CAAC,SAAS,EAAE,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,QAAQ,CAAC;IAC9D,OAAO,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;IAC1D,UAAU,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,UAAU,CAAC;CACjE,CAAC;AA0FJ,eAAe,YAAY,CAAC","sourcesContent":["/**\n * @file PowerService.ts\n * @description Service for handling power collection, activation, and management\n */\n\nimport { Position } from '../schemas/index.js';\nimport { Power } from '../schemas/PowerSchema.js';\nimport { nanoid } from 'nanoid';\n\nclass PowerService {\n  private static powerTypes = [\n    'wisdom', 'courage', 'justice', 'temperance'\n  ];\n\n  private static rarities = [\n    { name: 'common', weight: 50 },\n    { name: 'uncommon', weight: 30 },\n    { name: 'rare', weight: 15 },\n    { name: 'epic', weight: 4 },\n    { name: 'legendary', weight: 1 }\n  ];\n\n  private static powerNames = {\n    wisdom: ['Insight', 'Knowledge', 'Understanding', 'Awareness', 'Clarity'],\n    courage: ['Bravery', 'Valor', 'Strength', 'Resolve', 'Spirit'],\n    justice: ['Balance', 'Harmony', 'Order', 'Truth', 'Honor'],\n    temperance: ['Peace', 'Calm', 'Patience', 'Control', 'Serenity']\n  };\n\n  /**\n   * Generate a random position within a radius of a center point\n   */\n  private static generateRandomPosition(center: Position, radius: number): Position {\n    const angle = Math.random() * Math.PI * 2;\n    const distance = Math.random() * radius;\n    const x = center.x + Math.cos(angle) * distance;\n    const y = center.y + Math.sin(angle) * distance;\n    return new Position(x, y);\n  }\n\n  /**\n   * Get a random rarity based on weights\n   */\n  private static getRandomRarity(): string {\n    const totalWeight = PowerService.rarities.reduce((sum, rarity) => sum + rarity.weight, 0);\n    let random = Math.random() * totalWeight;\n    \n    for (const rarity of PowerService.rarities) {\n      if (random < rarity.weight) {\n        return rarity.name;\n      }\n      random -= rarity.weight;\n    }\n    \n    return 'common'; // fallback\n  }\n\n  /**\n   * Generate a random power name based on type\n   */\n  private static getRandomPowerName(type: string): string {\n    const names = PowerService.powerNames[type] || PowerService.powerNames.wisdom;\n    return names[Math.floor(Math.random() * names.length)];\n  }\n\n  /**\n   * Generate powers for an area\n   */\n  static generatePowersForArea(center: Position, radius: number, count: number): Power[] {\n    const powers: Power[] = [];\n    \n    for (let i = 0; i < count; i++) {\n      // Get random type and rarity\n      const type = PowerService.powerTypes[Math.floor(Math.random() * PowerService.powerTypes.length)];\n      const rarity = PowerService.getRandomRarity();\n      \n      // Generate power\n      const power = new Power(\n        nanoid(),\n        PowerService.getRandomPowerName(type),\n        type,\n        rarity\n      );\n      \n      // Set position\n      const pos = PowerService.generateRandomPosition(center, radius);\n      power.position.x = pos.x;\n      power.position.y = pos.y;\n      \n      powers.push(power);\n    }\n    \n    return powers;\n  }\n\n  /**\n   * Check if a power should be despawned\n   */\n  static shouldDespawn(power: Power): boolean {\n    return !power.isActive || Date.now() >= power.despawnTime;\n  }\n\n  /**\n   * Calculate power value based on rarity and other factors\n   */\n  static calculatePowerValue(power: Power, playerLevel: number): number {\n    let value = power.value;\n    \n    // Bonus for higher level players finding lower rarity items\n    if (playerLevel > 10) {\n      value *= (1 + (playerLevel - 10) * 0.1);\n    }\n    \n    return Math.round(value);\n  }\n}\n\nexport default PowerService; "]}